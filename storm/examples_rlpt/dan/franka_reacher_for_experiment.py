#
# MIT License
#
# Copyright (c) 2020-2021 NVIDIA CORPORATION.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.#
""" 
Based on Elias's franka_reacher_for_comparison.py 
"""

import copy
from re import I
from typing import Tuple, Union
from click import BadArgumentUsage
from cv2 import norm
from isaacgym import gymapi
from isaacgym import gymutil
from isaacgym import gymtorch
# from isaacgym.gymapi import Tensor
from matplotlib.transforms import Transform
from sympy import Integer
import torch

from BGU.Rlpt.reward import point_cloud_utils
torch.multiprocessing.set_start_method('spawn',force=True)
torch.set_num_threads(8)
torch.backends.cudnn.benchmark = False
torch.backends.cuda.matmul.allow_tf32 = True
torch.backends.cudnn.allow_tf32 = True
import matplotlib
matplotlib.use('tkagg')
import matplotlib.pyplot as plt
import time
import yaml
import argparse
import numpy as np
from quaternion import quaternion, from_rotation_vector, from_rotation_matrix
import matplotlib.pyplot as plt
import random
import math
from scipy.spatial.transform import Rotation as R
from quaternion import from_euler_angles, as_float_array, as_rotation_matrix, from_float_array, as_quat_array
from storm_kit.gym.core import Gym, World
from storm_kit.gym.sim_robot import RobotSim
from storm_kit.util_file import get_configs_path, get_gym_configs_path, join_path, load_yaml, get_assets_path
from storm_kit.gym.helpers import load_struct_from_dict
from storm_kit.util_file import get_mpc_configs_path as mpc_configs_path
from storm_kit.differentiable_robot_model.coordinate_transform import quaternion_to_matrix, CoordinateTransform
from storm_kit.mpc.task.reacher_task import ReacherTask
from BGU.Rlpt.DebugTools.CostFnSniffer import CostFnSniffer
from BGU.Rlpt.DebugTools.globs import GLobalVars
from BGU.Rlpt.configs.default_main import load_config_with_defaults
import BGU.Rlpt.reward.point_cloud_utils 
import matplotlib.pyplot as plt

np.set_printoptions(precision=2)
BGU_CFG_PATH = 'BGU/Rlpt/Run/configs/main.yml'
GREEN = gymapi.Vec3(0.0, 0.8, 0.0)
RED = gymapi.Vec3(0.8, 0.1, 0.1)
EPISODES = 1 # How many simulations / episodes to run in total
EPISODE_MAX_TS = 200 # maximal number of time steps in a single episode 
FIGURE_COLUMNS = 1
    

# >>> Dan 
# told by elias:
#  each world model is a world to run at. "iter" is the index of the model in world_params_list (should be called "world_index" or simular) 
# <<<


world_params_list = [{'world_model': {'coll_objs': {'sphere': {'sphere1': {'radius': 0.04, 'position': [-0.5357734744985498, 0.402345508689139, 0.2520022492999887]}, 'sphere2': {'radius': 0.04, 'position': [-0.3700023656895255, -0.17199581157782995, 0.4218274094244757]}, 'sphere3': {'radius': 0.04, 'position': [-0.7272965946191279, 0.3009223918059427, 0.18170745504756652]}, 'sphere4': {'radius': 0.05, 'position': [0.2948549611698419, -0.564375408013291, 0.40771493738350295]}, 'sphere5': {'radius': 0.06, 'position': [0.0, 3.0, 0.0]}, 'sphere6': {'radius': 0.07, 'position': [0.0, 3.0, 0.0]}, 'sphere7': {'radius': 0.07, 'position': [0.44285773108214344, 0.6640265719930828, 0.6553875186074605]}, 'sphere8': {'radius': 0.08, 'position': [-0.17428957806483247, 0.7856183557174176, 0.47815214151938457]}, 'sphere9': {'radius': 0.09, 'position': [0.8575303467282515, -0.45571611297009473, 0.4383135605148688]}, 'sphere10': {'radius': 0.1, 'position': [0.9481070843761836, -0.5504134127039761, 0.6187096451807464]}}, 'cube': {'cube1': {'dims': [0.1, 0.1, 0.1], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube2': {'dims': [0.1, 0.1, 0.2], 'pose': [-0.2885709012664863, 0.4778345344725592, 0.532966528319243, 0.6980838721067888, 0.056250647380763186, -0.7137843150652049, 0.005169500994668452]}, 'cube3': {'dims': [0.1, 0.1, 0.3], 'pose': [-0.6987374518371363, -0.6364590965678762, 0.12353670481965989, -0.45120256223567934, -0.46250856494203874, 0.47491428964791926, -0.5974600343750418]}, 'cube4': {'dims': [0.1, 0.2, 0.1], 'pose': [0.7942541009871507, 0.6010752787901307, 0.6635516966478058, -0.22890146702344658, 0.9216568257731815, 0.3068717676854141, 0.06310730621605296]}, 'cube5': {'dims': [0.1, 0.2, 0.2], 'pose': [-0.6512235425578872, 0.987793685612596, 0.6847114614351515, 0.46345317158906163, 0.5865730874903496, -0.37743881699623905, 0.5465190849371666]}, 'cube6': {'dims': [0.1, 0.2, 0.3], 'pose': [0.9803312895750173, -0.6745357388723082, 0.28547869684491056, 0.6185624569883936, -0.2690283757087215, 0.6701634011394462, 0.3096534121259101]}, 'cube7': {'dims': [0.1, 0.3, 0.1], 'pose': [0.18468046847893416, -0.27676495446206784, 0.6139689748239938, 0.3186743181785274, 0.17703172363826258, -0.8568559491343359, 0.3645604616414306]}, 'cube8': {'dims': [0.1, 0.3, 0.2], 'pose': [0.4177846293472868, -0.787512863189118, 0.1733990204722219, 0.12361373048417137, -0.41763408594632573, 0.602011680513357, 0.6692408777241927]}, 'cube9': {'dims': [0.1, 0.3, 0.3], 'pose': [0.44819264321441243, 0.504174120604157, 0.48304391578208616, -0.49147765864353987, -0.2894795912763093, 0.4346720191242227, -0.6969300632626179]}, 'cube10': {'dims': [0.2, 0.1, 0.1], 'pose': [0.9857729053041304, 0.6722402921217592, 0.6597703842347493, 0.4411819926814173, -0.08940441277891342, -0.45976668856879144, -0.765493234713279]}, 'cube11': {'dims': [0.2, 0.1, 0.2], 'pose': [-0.7209461102320838, -0.8477951684499309, 0.37564204964432524, 0.7665657050272212, -0.03413858418737892, 0.4803487369261279, -0.42482545578069364]}, 'cube12': {'dims': [0.2, 0.1, 0.3], 'pose': [-0.18272134342289437, -0.19853565287693498, 0.6505234973202848, -0.18260676820562477, -0.5939817431791405, 0.09705662507969859, 0.7774448330933234]}, 'cube13': {'dims': [0.2, 0.2, 0.1], 'pose': [-0.28596400730608007, 0.5478378630189866, 0.399848559187301, 0.324418808800275, 0.26846825980600963, -0.03229009300335833, 0.9064406102261625]}, 'cube14': {'dims': [0.2, 0.2, 0.2], 'pose': [-0.9376855276358355, 0.3394596544521766, 0.6311181892786898, -0.19922410447027267, 0.14167998199228746, -0.3688223028724334, -0.8967756953690025]}, 'cube15': {'dims': [0.2, 0.2, 0.3], 'pose': [0.28541779262753486, -0.8882213922377888, 0.37571503812284035, -0.3544809831513122, 0.45290014931575584, -0.6207033294504894, 0.5328715268645178]}, 'cube16': {'dims': [0.2, 0.3, 0.1], 'pose': [0.7584101376228902, 0.13478517636851486, 0.5455606536704157, -0.9379953807631229, 0.0706299249469384, 0.303947687792146, 0.15096980643440672]}, 'cube17': {'dims': [0.2, 0.3, 0.2], 'pose': [0.5583601776608257, 0.6993372164649275, 0.32844244943043, 0.04680104485697173, 0.3636396010156108, -0.43143087428316185, 0.8242835091694906]}, 'cube18': {'dims': [0.2, 0.3, 0.3], 'pose': [-0.7988253102491426, -0.8009034218579342, 0.4044959121474949, -0.09820968167700189, 0.1902143162307311, 0.6808191174181119, 0.7004703431864913]}, 'cube19': {'dims': [0.3, 0.1, 0.1], 'pose': [0.49453561611174623, 0.3359035189884687, 0.48803078344225004, -0.14352716555992817, 0.36603919042765676, 0.2904511563561692, 0.8723837398695385]}, 'cube20': {'dims': [0.3, 0.1, 0.2], 'pose': [-0.5130966039728129, 0.6120836259023413, 0.19913271438638436, 0.1683274829831946, -0.3046970363990945, 0.40844977344549005, 0.8437975806166306]}, 'cube21': {'dims': [0.3, 0.1, 0.3], 'pose': [-0.17687417786890702, -0.5064717879333912, 0.4275148973796925, -0.41323272241462966, -0.36564341623544083, -0.812750397149786, 0.18703048206732215]}, 'cube22': {'dims': [0.3, 0.2, 0.1], 'pose': [-0.8113658833117179, -0.8745168935824477, 0.5745476547167897, 0.10651264754487068, -0.6634383689730647, 0.6855722769879445, 0.28017001894011967]}, 'cube23': {'dims': [0.3, 0.2, 0.2], 'pose': [0.9270609535906081, 0.29908054808866663, 0.25510853410761763, -0.38595286922706146, 0.0248706718026178, 0.024715890168270464, 0.9218519171714487]}, 'cube24': {'dims': [0.3, 0.2, 0.3], 'pose': [0.3970016595188187, -0.6133736915793115, 0.6686461786443482, -0.6580430935742932, -0.5963784144692079, 0.4157381836410311, -0.1961474863902769]}, 'cube25': {'dims': [0.3, 0.3, 0.1], 'pose': [0.8830783941890297, 0.8408256317725622, 0.6202896960617573, -0.43924866089110365, -0.5238766709762599, -0.4973546745961701, 0.5340900440651759]}, 'cube26': {'dims': [0.3, 0.3, 0.2], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube27': {'dims': [0.3, 0.3, 0.3], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube28': {'dims': [2.0, 2.0, 0.2], 'pose': [0.0, 0.0, -0.1, 0, 0, 0, 1.0]}}}}},
                     {'world_model': {'coll_objs': {'sphere': {'sphere1': {'radius': 0.04, 'position': [0.0, 3.0, 0.0]}, 'sphere2': {'radius': 0.04, 'position': [-0.2520217114582065, 0.9536868235755181, 0.4789706528869595]}, 'sphere3': {'radius': 0.04, 'position': [0.0, 3.0, 0.0]}, 'sphere4': {'radius': 0.05, 'position': [-0.16426503480460075, -0.7615106429497664, 0.25764151874862257]}, 'sphere5': {'radius': 0.06, 'position': [-0.37832138039829977, -0.3877354690519633, 0.4291515933645803]}, 'sphere6': {'radius': 0.07, 'position': [0.0, 3.0, 0.0]}, 'sphere7': {'radius': 0.07, 'position': [-0.7736227802101716, -0.6488645492401135, 0.5659462935083912]}, 'sphere8': {'radius': 0.08, 'position': [0.35280653335758627, -0.6778364316104141, 0.4273654445180327]}, 'sphere9': {'radius': 0.09, 'position': [0.0, 3.0, 0.0]}, 'sphere10': {'radius': 0.1, 'position': [0.0, 3.0, 0.0]}}, 'cube': {'cube1': {'dims': [0.1, 0.1, 0.1], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube2': {'dims': [0.1, 0.1, 0.2], 'pose': [-0.8071360942536275, -0.6656451863791026, 0.4030067583234721, 0.9371102977572636, -0.11098764513443578, 0.31915798603955253, 0.08743118672408608]}, 'cube3': {'dims': [0.1, 0.1, 0.3], 'pose': [-0.19611198594521584, 0.1960088685357547, 0.5209242782066749, -0.45735026708383614, 0.8471224924461737, 0.23474115213939523, 0.13457640016880912]}, 'cube4': {'dims': [0.1, 0.2, 0.1], 'pose': [0.2635220042560735, 0.11808254422348963, 0.4840202023943394, -0.613710318166888, -0.026216699032800862, 0.7890636461030393, 0.0071338955626104456]}, 'cube5': {'dims': [0.1, 0.2, 0.2], 'pose': [0.9779621294944782, -0.404999223590232, 0.4525310694019682, -0.13674873612816094, 0.18724900664644484, 0.8849697872964665, 0.403814398269449]}, 'cube6': {'dims': [0.1, 0.2, 0.3], 'pose': [-0.6129900768093985, -0.8321124040168265, 0.3879025111000959, -0.23369786376058652, 0.45665127171785375, 0.8557375550770496, 0.06758817457927523]}, 'cube7': {'dims': [0.1, 0.3, 0.1], 'pose': [-0.13726320733439878, -0.6100214446548862, 0.6551736416184988, -0.4580160477865864, -0.45317817950677536, -0.11572335467314823, 0.7559490345070051]}, 'cube8': {'dims': [0.1, 0.3, 0.2], 'pose': [0.6276557333062793, 0.5643027338634771, 0.4635755199234395, -0.5857498832373783, -0.43639404062788245, 0.10030901572575038, 0.6755704381898299]}, 'cube9': {'dims': [0.1, 0.3, 0.3], 'pose': [-0.959003579103874, -0.7098886149983832, 0.6099854566265462, 0.1187336529045486, 0.8593247305003701, 0.07910993258538274, -0.49112620148465397]}, 'cube10': {'dims': [0.2, 0.1, 0.1], 'pose': [-0.29223593071940823, 0.2904035736094489, 0.35336437186726233, -0.8214483550076311, 0.28800961360692323, 0.3686399002937688, -0.32615592350384776]}, 'cube11': {'dims': [0.2, 0.1, 0.2], 'pose': [-0.46613821793544163, 0.9655412064989142, 0.2966435440857067, 0.04205289506512483, -0.8593967261455268, -0.24290308476135836, 0.44795860581130575]}, 'cube12': {'dims': [0.2, 0.1, 0.3], 'pose': [0.40653786131776715, -0.26995554708740677, 0.3493408553725783, -0.8041079103825794, -0.2906352408958686, 0.31187422616500765, 0.4143381375924012]}, 'cube13': {'dims': [0.2, 0.2, 0.1], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube14': {'dims': [0.2, 0.2, 0.2], 'pose': [0.2755893010600123, 0.23967471034444993, 0.2191446679537482, 0.3698808545675243, 0.7859159449237122, 0.46790371580519063, -0.16306561156406293]}, 'cube15': {'dims': [0.2, 0.2, 0.3], 'pose': [-0.11402513323837205, 0.17735261907274832, 0.13451319026364558, -0.4223518927737549, 0.5770012826332359, 0.399855373954467, 0.5734144037515629]}, 'cube16': {'dims': [0.2, 0.3, 0.1], 'pose': [-0.6183866155876524, 0.47044297299368887, 0.4010291969513131, -0.579898653560113, -0.3441668251501638, -0.648335062244187, -0.3534521115088308]}, 'cube17': {'dims': [0.2, 0.3, 0.2], 'pose': [-0.7569588841458563, -0.3431066587619874, 0.48988858082315156, -0.5832731563769025, 0.4461581953352899, 0.6783089271362496, -0.025145360457802857]}, 'cube18': {'dims': [0.2, 0.3, 0.3], 'pose': [0.6244322260797847, -0.18875154754943668, 0.5645567141657384, -0.21603341590350705, 0.6704427419951381, -0.21680958342772172, -0.6758917793944538]}, 'cube19': {'dims': [0.3, 0.1, 0.1], 'pose': [-0.2001137522033819, -0.8850462377312706, 0.27936707562443985, -0.6220068075238528, -0.10629768693491398, -0.7597825604184696, 0.15664863239181634]}, 'cube20': {'dims': [0.3, 0.1, 0.2], 'pose': [-0.22509674167968163, 0.4798451239907343, 0.4488755610261148, -0.0969013219257606, -0.007950694446985058, -0.0810096858502212, 0.9919598535552228]}, 'cube21': {'dims': [0.3, 0.1, 0.3], 'pose': [-0.6209783261922599, -0.4048294770980041, 0.37479131900151774, 0.3973482521870222, -0.7734317371248629, -0.30311254223268447, 0.38992371206836685]}, 'cube22': {'dims': [0.3, 0.2, 0.1], 'pose': [-0.7609422503664184, 0.7985619022764392, 0.28230631507530285, 0.9042349656157422, 0.34436074931005206, 0.17944624116334357, 0.17769031438112826]}, 'cube23': {'dims': [0.3, 0.2, 0.2], 'pose': [-0.7414727789972382, -0.739407332733673, 0.4534117164994528, 0.7795949203668379, 0.19745359497325188, -0.24390434338422123, -0.5419912446236329]}, 'cube24': {'dims': [0.3, 0.2, 0.3], 'pose': [0.2556984631809891, 0.7367277497523675, 0.6537414735397347, -0.8107800340644726, 0.529621132512091, -0.2239002343528857, -0.10957133482688663]}, 'cube25': {'dims': [0.3, 0.3, 0.1], 'pose': [-0.8428958465696756, 0.5525462414549538, 0.1532635382803819, 0.553174841565876, 0.3001021004155507, -0.7001823846731786, 0.3371660602405343]}, 'cube26': {'dims': [0.3, 0.3, 0.2], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube27': {'dims': [0.3, 0.3, 0.3], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube28': {'dims': [2.0, 2.0, 0.2], 'pose': [0.0, 0.0, -0.1, 0, 0, 0, 1.0]}}}}},
                     {'world_model': {'coll_objs': {'sphere': {'sphere1': {'radius': 0.04, 'position': [0.946360606579948, -0.16190476592492353, 0.3920184668247989]}, 'sphere2': {'radius': 0.04, 'position': [0.2023555719252127, 0.40706228232410646, 0.362868972273387]}, 'sphere3': {'radius': 0.04, 'position': [0.8235445349623186, 0.5725144743414579, 0.6989786580538326]}, 'sphere4': {'radius': 0.05, 'position': [-0.6856227171995166, 0.7368910550138528, 0.21418509596985824]}, 'sphere5': {'radius': 0.06, 'position': [-0.4958897457004722, 0.2548073502257765, 0.644275930495733]}, 'sphere6': {'radius': 0.07, 'position': [-0.9481020062400372, 0.1584453544212987, 0.14456083209377943]}, 'sphere7': {'radius': 0.07, 'position': [0.5296040607148057, -0.24371135079965422, 0.42351458246784435]}, 'sphere8': {'radius': 0.08, 'position': [0.9098022189741913, -0.9030811538439185, 0.12541108395000602]}, 'sphere9': {'radius': 0.09, 'position': [0.682173632817741, -0.2199364500549913, 0.4119907810241382]}, 'sphere10': {'radius': 0.1, 'position': [0.9067789326542612, -0.9444093874655127, 0.4534261597415771]}}, 'cube': {'cube1': {'dims': [0.1, 0.1, 0.1], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube2': {'dims': [0.1, 0.1, 0.2], 'pose': [0.5974740725838175, -0.5515318856509139, 0.23008413372984082, 0.3092340318533266, 0.30491659124032133, 0.10893725015631324, 0.8941660144841668]}, 'cube3': {'dims': [0.1, 0.1, 0.3], 'pose': [0.8948132464222636, -0.8147246562527972, 0.5401711403815769, 0.20114367067937894, 0.43805000492665874, -0.027523793133533703, 0.875725903317312]}, 'cube4': {'dims': [0.1, 0.2, 0.1], 'pose': [0.487067811495438, 0.4633250871329436, 0.5795166602530687, -0.4175073752099292, 0.4154232128766047, 0.7555010706741664, -0.2869307896667467]}, 'cube5': {'dims': [0.1, 0.2, 0.2], 'pose': [-0.7848540844680505, -0.5259888942994708, 0.1426205354841895, 0.6357783896276281, -0.3062069734454784, -0.16193532634766214, 0.6897826315416592]}, 'cube6': {'dims': [0.1, 0.2, 0.3], 'pose': [0.5127597970323454, -0.9999450409268199, 0.37309130470008767, 0.217305925947522, 0.8642186049746322, -0.428704437165587, 0.14871732554859948]}, 'cube7': {'dims': [0.1, 0.3, 0.1], 'pose': [0.3392502599864388, 0.1371987860234807, 0.5348086885310341, 0.810592625149438, 0.04229091735824389, -0.35523515502277053, 0.4636367748553698]}, 'cube8': {'dims': [0.1, 0.3, 0.2], 'pose': [-0.15430452292664298, -0.81555312060364, 0.6318140562081684, 0.09252253184465858, 0.6220862655895633, 0.26073383847035436, 0.7324384784692846]}, 'cube9': {'dims': [0.1, 0.3, 0.3], 'pose': [-0.4350458887077354, 0.7965435749329128, 0.6324874508301038, 0.7912367254107631, -0.15092798114167197, 0.5346861355056804, -0.2554915367830273]}, 'cube10': {'dims': [0.2, 0.1, 0.1], 'pose': [0.44501560150997166, -0.7914771182080461, 0.20227906406145527, -0.003063463240554347, 0.03487464591694511, -0.2325813374772902, 0.9719466527142403]}, 'cube11': {'dims': [0.2, 0.1, 0.2], 'pose': [0.9268778022830811, 0.3641853127080845, 0.13208670337218148, 0.2673716696896387, 0.7497806983325754, 0.6052452239833387, 0.004417408816083768]}, 'cube12': {'dims': [0.2, 0.1, 0.3], 'pose': [0.32905957605581604, -0.5180660602261677, 0.5533776413187553, 0.1491258875127641, 0.7518988815714968, 0.16554166063603037, -0.6204881144380833]}, 'cube13': {'dims': [0.2, 0.2, 0.1], 'pose': [0.525888276216214, -0.8116430350460352, 0.3129533733621759, 0.34313591030447504, 0.677837146308228, -0.4981976580430899, 0.4178440422748872]}, 'cube14': {'dims': [0.2, 0.2, 0.2], 'pose': [-0.48689547316228177, 0.24466872658920352, 0.5475576234588757, -0.06560007679217819, 0.8032469235028645, -0.5275324124163459, 0.2687016257082088]}, 'cube15': {'dims': [0.2, 0.2, 0.3], 'pose': [-0.5166351099285043, 0.6988779184056413, 0.679424301144884, -0.3577603144978858, 0.4737006070513898, 0.5347694758728356, 0.6013625361828017]}, 'cube16': {'dims': [0.2, 0.3, 0.1], 'pose': [-0.12567585865351583, -0.7529320444512472, 0.5389732361615666, 0.8118529184205588, -0.1535596645362592, -0.5625955077179201, -0.02829422158583958]}, 'cube17': {'dims': [0.2, 0.3, 0.2], 'pose': [0.7965145519428479, -0.49012097679528677, 0.48812082706392923, -0.4082776078944923, 0.05746780284880193, -0.778948342607743, 0.4724894983767709]}, 'cube18': {'dims': [0.2, 0.3, 0.3], 'pose': [-0.6193551890695976, 0.18814062009358945, 0.4728749478583948, -0.6488519466815477, 0.15696788903582937, -0.374519066714978, -0.6434964660090555]}, 'cube19': {'dims': [0.3, 0.1, 0.1], 'pose': [0.1572197579229153, 0.7700755339653845, 0.5177165395390747, -0.42696050388943085, -0.16105407516386563, 0.6392727838756878, -0.6189479952204574]}, 'cube20': {'dims': [0.3, 0.1, 0.2], 'pose': [0.40548802211105783, -0.12488602567787532, 0.3661122354048346, 0.15152813321299868, -0.4113096141631562, -0.8968615522001381, -0.05918599772833455]}, 'cube21': {'dims': [0.3, 0.1, 0.3], 'pose': [0.7905246298664247, -0.9151315118332102, 0.5336130760450862, -0.33651485071676535, -0.6090884056599387, -0.352829082017156, 0.625524346625004]}, 'cube22': {'dims': [0.3, 0.2, 0.1], 'pose': [-0.5440767816860299, 0.4758877047411635, 0.6836238443509777, 0.23167887787596925, 0.5533226451804657, -0.4188765609778907, 0.6816900868722969]}, 'cube23': {'dims': [0.3, 0.2, 0.2], 'pose': [-0.1836709552317929, 0.6423537287979247, 0.6129948645810223, -0.4174110456066666, 0.5963540571487989, -0.4088642856196618, -0.5504178898550084]}, 'cube24': {'dims': [0.3, 0.2, 0.3], 'pose': [0.7547039777223358, -0.8969017268291538, 0.5389150811221136, 0.3215897618789463, -0.2033177561004319, 0.0963023211983027, 0.9197650667647401]}, 'cube25': {'dims': [0.3, 0.3, 0.1], 'pose': [-0.5300526488373092, -0.10368131457971774, 0.18016589259925878, -0.4646273250754599, -0.33800667330092066, 0.8039642145456152, -0.15334431625371642]}, 'cube26': {'dims': [0.3, 0.3, 0.2], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube27': {'dims': [0.3, 0.3, 0.3], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube28': {'dims': [2.0, 2.0, 0.2], 'pose': [0.0, 0.0, -0.1, 0, 0, 0, 1.0]}}}}},
                     {'world_model': {'coll_objs': {'sphere': {'sphere1': {'radius': 0.04, 'position': [-0.561544561386512, 0.6078631927998304, 0.181882180552069]}, 'sphere2': {'radius': 0.04, 'position': [0.0, 3.0, 0.0]}, 'sphere3': {'radius': 0.04, 'position': [0.7275304522941893, 0.7395547870580864, 0.10642473808718783]}, 'sphere4': {'radius': 0.05, 'position': [0.9938668044499609, -0.562603577168077, 0.3048124665349571]}, 'sphere5': {'radius': 0.06, 'position': [-0.19144791068733713, 0.7234105363350212, 0.6323643067290861]}, 'sphere6': {'radius': 0.07, 'position': [0.0, 3.0, 0.0]}, 'sphere7': {'radius': 0.07, 'position': [0.0, 3.0, 0.0]}, 'sphere8': {'radius': 0.08, 'position': [-0.6469991081293129, 0.3765149817520048, 0.6660893380467273]}, 'sphere9': {'radius': 0.09, 'position': [0.0, 3.0, 0.0]}, 'sphere10': {'radius': 0.1, 'position': [0.0, 3.0, 0.0]}}, 'cube': {'cube1': {'dims': [0.1, 0.1, 0.1], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube2': {'dims': [0.1, 0.1, 0.2], 'pose': [0.8998198896207912, -0.6887509442279718, 0.5565754585069561, 0.13472158166540774, -0.2737336913482846, 0.7931331022036447, 0.5271241256509095]}, 'cube3': {'dims': [0.1, 0.1, 0.3], 'pose': [-0.11411153857820688, -0.6065830165577386, 0.34456216171401977, 0.3438360545624862, 0.8579847542316185, 0.028608360918169207, 0.3805528751364101]}, 'cube4': {'dims': [0.1, 0.2, 0.1], 'pose': [-0.1429120936159448, 0.6039184446692931, 0.25615831998224603, -0.04881524321530409, 0.6977003951903649, 0.06007867154442115, 0.7121950461822218]}, 'cube5': {'dims': [0.1, 0.2, 0.2], 'pose': [0.8306512792554447, -0.4023766282523742, 0.6001147000751407, -0.5138449710819742, -0.2854010293490123, 0.406963761805774, 0.6992067610636946]}, 'cube6': {'dims': [0.1, 0.2, 0.3], 'pose': [-0.561575402337337, -0.3948384053185364, 0.13853538307868815, -0.12324395347345829, 0.9415510107222752, 0.14081296900992862, 0.2801148512640897]}, 'cube7': {'dims': [0.1, 0.3, 0.1], 'pose': [-0.6151813416797121, 0.5032141265863607, 0.6756152140010809, -0.025294792567059077, -0.7117979097274423, -0.04725298547832252, 0.700336393842287]}, 'cube8': {'dims': [0.1, 0.3, 0.2], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube9': {'dims': [0.1, 0.3, 0.3], 'pose': [0.8646620382348356, -0.346185534996729, 0.6862882612894563, 0.46048055390494214, -0.3388856622635292, 0.2976222165197222, 0.7645490066840022]}, 'cube10': {'dims': [0.2, 0.1, 0.1], 'pose': [-0.46168462192523163, 0.37672414819786415, 0.13772396083679467, -0.31567657109479963, -0.8197270411768139, 0.41566915857444964, -0.23582839319162785]}, 'cube11': {'dims': [0.2, 0.1, 0.2], 'pose': [-0.478668499621686, -0.7229416671374672, 0.6466149525743597, 0.5367985789518336, -0.35872472695806046, 0.6629577287106927, 0.3790130681743265]}, 'cube12': {'dims': [0.2, 0.1, 0.3], 'pose': [-0.75397864386998, -0.7873947039781742, 0.30032010149570015, -0.4463862754384194, -0.5067280780678027, -0.5365306561102947, 0.506064030584849]}, 'cube13': {'dims': [0.2, 0.2, 0.1], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube14': {'dims': [0.2, 0.2, 0.2], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube15': {'dims': [0.2, 0.2, 0.3], 'pose': [-0.41927404845830685, -0.5371929267693943, 0.25263133446747416, -0.6441247872995424, 0.22555902424345375, 0.7106493476493123, 0.17089145576730042]}, 'cube16': {'dims': [0.2, 0.3, 0.1], 'pose': [0.5141775086805417, -0.7960775854457925, 0.1950926661390312, -0.5089279050018759, 0.25414104640665697, -0.1876847471188455, 0.8007366306974262]}, 'cube17': {'dims': [0.2, 0.3, 0.2], 'pose': [-0.7302023598624116, 0.6028464423842766, 0.44927067402638, 0.7985671699737087, 0.09269053040158734, -0.5935653089820666, -0.03713710525980585]}, 'cube18': {'dims': [0.2, 0.3, 0.3], 'pose': [0.962673866193605, -0.33835669289728865, 0.22758482532147767, 0.17196529518283832, 0.9792057998771577, 0.07418631833831954, -0.07797646382736766]}, 'cube19': {'dims': [0.3, 0.1, 0.1], 'pose': [0.7479315977729042, 0.848213620023954, 0.49047739915896804, -0.09852815195020186, 0.7341741712143725, 0.608560284607355, 0.2844905439440515]}, 'cube20': {'dims': [0.3, 0.1, 0.2], 'pose': [0.8782432645962939, -0.3447063881144333, 0.13511200944876017, -0.35201313983406307, 0.22069761160890763, 0.9077555966726538, 0.057957659750566534]}, 'cube21': {'dims': [0.3, 0.1, 0.3], 'pose': [0.3291397466270727, -0.722275244067013, 0.3463681677308743, 0.3673570399967774, -0.8796220750468323, 0.2821237409986359, -0.10825897200715331]}, 'cube22': {'dims': [0.3, 0.2, 0.1], 'pose': [0.48265371111995103, -0.453853305270684, 0.40940525360255187, -0.5811706815675076, -0.36391794769501196, -0.31198940417553456, 0.657622215191978]}, 'cube23': {'dims': [0.3, 0.2, 0.2], 'pose': [0.8498116034664474, -0.9215792022003271, 0.1940252652206355, 0.18962267499960134, 0.6935955611317919, 0.09879229466288575, 0.6879015345378376]}, 'cube24': {'dims': [0.3, 0.2, 0.3], 'pose': [0.7163503294518865, 0.2417681525920289, 0.24627475478613864, -0.008028156575861423, 0.2968755463932999, -0.6552467393228818, 0.6945877693009032]}, 'cube25': {'dims': [0.3, 0.3, 0.1], 'pose': [0.7525943946353151, -0.6361468076528776, 0.34263600218441986, 0.36345475958017426, 0.474734184510208, 0.7983608739378791, 0.07174961157450013]}, 'cube26': {'dims': [0.3, 0.3, 0.2], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube27': {'dims': [0.3, 0.3, 0.3], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube28': {'dims': [2.0, 2.0, 0.2], 'pose': [0.0, 0.0, -0.1, 0, 0, 0, 1.0]}}}}},
                     {'world_model': {'coll_objs': {'sphere': {'sphere1': {'radius': 0.04, 'position': [0.6684297628321552, -0.34109477439586533, 0.2329714879606224]}, 'sphere2': {'radius': 0.04, 'position': [0.8738976144713015, 0.28055755174410074, 0.6325769791479788]}, 'sphere3': {'radius': 0.04, 'position': [-0.9513333191909017, 0.5185188973113952, 0.3724908373830128]}, 'sphere4': {'radius': 0.05, 'position': [0.6552266869717717, 0.5982535552640118, 0.2171400108321877]}, 'sphere5': {'radius': 0.06, 'position': [0.16295832456776654, 0.38265043858924386, 0.4131567751802975]}, 'sphere6': {'radius': 0.07, 'position': [0.9488586235751127, 0.545434665071403, 0.43534929728259675]}, 'sphere7': {'radius': 0.07, 'position': [0.0, 3.0, 0.0]}, 'sphere8': {'radius': 0.08, 'position': [-0.5612756080798049, 0.47507042895895857, 0.4140839084935152]}, 'sphere9': {'radius': 0.09, 'position': [-0.6347561796113574, -0.4597971235101076, 0.17164602669425544]}, 'sphere10': {'radius': 0.1, 'position': [0.0, 3.0, 0.0]}}, 'cube': {'cube1': {'dims': [0.1, 0.1, 0.1], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube2': {'dims': [0.1, 0.1, 0.2], 'pose': [-0.19671770610594141, 0.12000145422879092, 0.6605874249494306, 0.18444124010625668, 0.16110562305353182, -0.9555671779352323, 0.16406637565782847]}, 'cube3': {'dims': [0.1, 0.1, 0.3], 'pose': [-0.796430598542748, -0.8049858011934246, 0.6098324442169084, 0.08035916158493385, -0.9428664408075477, 0.006403261663724773, 0.3232712145990415]}, 'cube4': {'dims': [0.1, 0.2, 0.1], 'pose': [0.6412900969108972, 0.3132818404434797, 0.41483206431271524, 0.14311118786656285, -0.46210150096917274, -0.7361095816830704, 0.47341744207816644]}, 'cube5': {'dims': [0.1, 0.2, 0.2], 'pose': [0.9253693120730041, -0.8129382821307755, 0.6376212519452161, 0.5629184509017525, 0.7594814616559326, 0.19872698659781235, -0.25849238254364937]}, 'cube6': {'dims': [0.1, 0.2, 0.3], 'pose': [-0.6281179587900078, 0.8826295236953688, 0.14889475909343936, -0.4739913071007666, 0.24225804879435306, 0.8247486130007546, 0.19087431451243314]}, 'cube7': {'dims': [0.1, 0.3, 0.1], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube8': {'dims': [0.1, 0.3, 0.2], 'pose': [-0.36156774011095527, -0.2742290342095498, 0.5492378178480342, -0.03433789292340769, 0.6584614825109405, 0.621659092864317, 0.4228349056288868]}, 'cube9': {'dims': [0.1, 0.3, 0.3], 'pose': [0.3104895215988245, -0.5347084512061937, 0.20540737074125587, 0.6315424478635768, -0.27735001233962847, 0.6705528117833527, 0.27311176066059273]}, 'cube10': {'dims': [0.2, 0.1, 0.1], 'pose': [0.15536333223235044, -0.9400162763062404, 0.568777907403111, -0.6608967188102174, 0.5463778117615752, 0.3383401927411541, 0.3875728678021722]}, 'cube11': {'dims': [0.2, 0.1, 0.2], 'pose': [0.5886180800250993, 0.2070724629890323, 0.6641365360325289, -0.49573668505028745, 0.46872783909908067, -0.7068554396490139, 0.1868013366854154]}, 'cube12': {'dims': [0.2, 0.1, 0.3], 'pose': [-0.4404544392760056, -0.4806593396482949, 0.2487037030485586, -0.38174085020607995, -0.19733801655786598, -0.886475556799369, 0.17173443947617328]}, 'cube13': {'dims': [0.2, 0.2, 0.1], 'pose': [0.5473603320592594, -0.7010413957951018, 0.2805807158962119, 0.4178393763719857, -0.8909591956680797, -0.1158095621413099, 0.13487072523048427]}, 'cube14': {'dims': [0.2, 0.2, 0.2], 'pose': [0.1351038072650143, 0.5461112221233057, 0.15439276302692878, -0.43961537313335314, 0.4038955430936363, -0.7815969243260876, 0.18086724926840447]}, 'cube15': {'dims': [0.2, 0.2, 0.3], 'pose': [0.37628697379145437, -0.9763470482600467, 0.5708243811578809, -0.4766867753760755, 0.2979314640843647, -0.7372992230447862, 0.37469509816337404]}, 'cube16': {'dims': [0.2, 0.3, 0.1], 'pose': [0.32611606322430275, -0.7595718625564515, 0.13257033141260144, 0.7685831163576476, -0.15477029053735292, 0.08546986676643935, 0.6148341664968507]}, 'cube17': {'dims': [0.2, 0.3, 0.2], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube18': {'dims': [0.2, 0.3, 0.3], 'pose': [0.3869055204953593, -0.8024296018467095, 0.17527187168288352, -0.17926192857461296, 0.691080546161867, 0.6328388491042506, 0.29964617592209236]}, 'cube19': {'dims': [0.3, 0.1, 0.1], 'pose': [-0.40603592355134654, 0.48074325776321747, 0.15870441109495717, -0.015958173596539116, 0.8781615589104096, 0.28538724077479993, 0.3835775488091663]}, 'cube20': {'dims': [0.3, 0.1, 0.2], 'pose': [-0.9428734411532895, 0.40898670510767343, 0.1416705808042717, -0.16183363802834874, 0.9643321587322381, -0.18494587107937022, 0.09832795130594207]}, 'cube21': {'dims': [0.3, 0.1, 0.3], 'pose': [0.15133797653489983, -0.44641804989390965, 0.15640433708225737, -0.3992715015728299, 0.5311491609611414, 0.1481278451198065, 0.7324759233873941]}, 'cube22': {'dims': [0.3, 0.2, 0.1], 'pose': [-0.9059592628707093, -0.8088639935752931, 0.14203466273582654, -0.14207427902968933, 0.7428665218134111, -0.6425046212826644, 0.12309362955676748]}, 'cube23': {'dims': [0.3, 0.2, 0.2], 'pose': [0.9470598125226133, -0.5085937041853221, 0.47941720876876714, 0.2627162556609807, -0.6304804543556106, 0.2274285651951037, 0.6940827136734595]}, 'cube24': {'dims': [0.3, 0.2, 0.3], 'pose': [-0.27049323252206314, 0.9677866542638253, 0.511197613991598, -0.3653720085518801, -0.5645476076084249, -0.7379058535362394, 0.05730833645572625]}, 'cube25': {'dims': [0.3, 0.3, 0.1], 'pose': [-0.6012488672812647, 0.958859938896522, 0.1548920084807081, -0.8782558390820878, 0.4505159383008209, 0.13076474530097315, 0.09275048162419555]}, 'cube26': {'dims': [0.3, 0.3, 0.2], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube27': {'dims': [0.3, 0.3, 0.3], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube28': {'dims': [2.0, 2.0, 0.2], 'pose': [0.0, 0.0, -0.1, 0, 0, 0, 1.0]}}}}},
                    {'world_model': {'coll_objs': {'sphere': {'sphere1': {'radius': 0.04, 'position': [0.40302044975901374, 0.9063534928548584, 0.46076300864619846]}, 'sphere2': {'radius': 0.04, 'position': [0.6690016109776898, 0.46950877129711277, 0.11343164030722525]}, 'sphere3': {'radius': 0.04, 'position': [0.6025822573918012, -0.41142582036629494, 0.2140904077558256]}, 'sphere4': {'radius': 0.05, 'position': [-0.8423842401791755, 0.8848050985010317, 0.41578757565062696]}, 'sphere5': {'radius': 0.06, 'position': [0.0, 3.0, 0.0]}, 'sphere6': {'radius': 0.07, 'position': [0.0, 3.0, 0.0]}, 'sphere7': {'radius': 0.07, 'position': [0.0, 3.0, 0.0]}, 'sphere8': {'radius': 0.08, 'position': [0.9320446043632116, -0.8166889553272632, 0.3097716102438059]}, 'sphere9': {'radius': 0.09, 'position': [0.0, 3.0, 0.0]}, 'sphere10': {'radius': 0.1, 'position': [0.0, 3.0, 0.0]}}, 'cube': {'cube1': {'dims': [0.1, 0.1, 0.1], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube2': {'dims': [0.1, 0.1, 0.2], 'pose': [-0.23463318293898494, -0.9673036684297861, 0.6453460376908009, 0.5099060472578737, -0.24924986059728038, 0.1309072001985827, 0.8128552361264925]}, 'cube3': {'dims': [0.1, 0.1, 0.3], 'pose': [0.3152019197943522, 0.7018040626273029, 0.2597187016702907, -0.7012423240432287, 0.15841040015151883, -0.6243668217057918, -0.305501914965021]}, 'cube4': {'dims': [0.1, 0.2, 0.1], 'pose': [-0.37318945167664885, 0.9224328892336854, 0.5490149074802434, -0.5820228730501412, 0.6340728702055766, 0.35784837582957024, 0.3621401806370843]}, 'cube5': {'dims': [0.1, 0.2, 0.2], 'pose': [-0.6334718485164459, 0.8369944112152312, 0.2981994108357765, -0.12208262433341403, 0.6789001242691977, 0.701374317244556, 0.17962327581042384]}, 'cube6': {'dims': [0.1, 0.2, 0.3], 'pose': [0.6783681959919152, 0.9468660042905354, 0.44082416257889123, 0.9203599581285508, -0.29775502561748834, -0.04535985847006981, 0.24944333110491504]}, 'cube7': {'dims': [0.1, 0.3, 0.1], 'pose': [-0.995586833728858, -0.8342221792081634, 0.4890419129657595, 0.4104587973689276, -0.12266349550063145, -0.764395713832143, -0.4818469001758431]}, 'cube8': {'dims': [0.1, 0.3, 0.2], 'pose': [-0.6617087825831629, 0.27022048765931744, 0.3448757208162526, 0.6829535227470074, 0.12075349679119374, -0.7167591351586606, 0.07245288777378711]}, 'cube9': {'dims': [0.1, 0.3, 0.3], 'pose': [0.1696509368148431, 0.692268493593836, 0.1697255109255716, -0.2583634533424303, 0.3413170702557405, 0.629119037430354, 0.6488144729209702]}, 'cube10': {'dims': [0.2, 0.1, 0.1], 'pose': [0.4052060619471991, 0.8637001171408499, 0.49995413335144523, -0.5620465748187163, 0.3838718569285294, 0.1576847008557109, 0.7154589997399128]}, 'cube11': {'dims': [0.2, 0.1, 0.2], 'pose': [0.634249850618197, 0.44607915423848277, 0.21810385159487103, 0.5865093762082682, -0.3479181386146768, -0.6752883661657325, -0.2809721391239751]}, 'cube12': {'dims': [0.2, 0.1, 0.3], 'pose': [0.49412623928001476, -0.8597560226238047, 0.2623254504562114, -0.7458609945525592, 0.0929340121396145, 0.4518939112758935, -0.48046491978548894]}, 'cube13': {'dims': [0.2, 0.2, 0.1], 'pose': [0.8005589453292824, -0.5432149745574193, 0.2607121471875426, 0.05648647979133942, 0.3833235487380754, 0.7597191988111964, 0.5222059685040997]}, 'cube14': {'dims': [0.2, 0.2, 0.2], 'pose': [0.46374387975011744, 0.6568008783523719, 0.5855451419106174, 0.1438314541483794, -0.9651671210411552, -0.07430155106488354, 0.20553398932547176]}, 'cube15': {'dims': [0.2, 0.2, 0.3], 'pose': [0.7297956783757396, 0.5932894502075824, 0.509049708912268, 0.2126502734082056, -0.37305336586421145, -0.19110185316455786, -0.8826613898624263]}, 'cube16': {'dims': [0.2, 0.3, 0.1], 'pose': [-0.7722313019439243, 0.7066637090462585, 0.40505016132674354, -0.4173930909237214, -0.33832788105966477, -0.2845846463309195, 0.7939325107460486]}, 'cube17': {'dims': [0.2, 0.3, 0.2], 'pose': [0.24831364426240846, 0.789084997922615, 0.11168609888043246, -0.8321984878852737, -0.13758632841501156, 0.24896996278428948, 0.47595129648518647]}, 'cube18': {'dims': [0.2, 0.3, 0.3], 'pose': [0.15629880575587415, 0.4120241163574683, 0.4379751197940105, -0.5313159539333948, 0.16167844950918742, 0.692441653057081, 0.46053012189402853]}, 'cube19': {'dims': [0.3, 0.1, 0.1], 'pose': [0.34539245157747617, 0.19048962421919413, 0.539164310865639, 0.21894013083934727, -0.9014978545487706, 0.2856757011460416, 0.24032526110821253]}, 'cube20': {'dims': [0.3, 0.1, 0.2], 'pose': [0.757837643157532, -0.251313112417176, 0.5969076385711276, 0.5447216727071417, -0.7196624893553777, -0.4284969152233009, 0.041887878223533986]}, 'cube21': {'dims': [0.3, 0.1, 0.3], 'pose': [0.6564869946977611, -0.3819293388799977, 0.27810878623031215, -0.26412027211227007, 0.6212913335843333, 0.18584098877622585, 0.7139332514759456]}, 'cube22': {'dims': [0.3, 0.2, 0.1], 'pose': [-0.8967822138157061, -0.9802763467176367, 0.616434311217649, 0.5177120308753631, 0.3664420212202224, -0.7547904461901079, -0.16728980994395054]}, 'cube23': {'dims': [0.3, 0.2, 0.2], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube24': {'dims': [0.3, 0.2, 0.3], 'pose': [-0.9761608992662257, -0.7883328964996918, 0.3524828043086178, -0.5279653707643334, -0.5574776501612451, -0.5688772797211168, 0.29470303266420333]}, 'cube25': {'dims': [0.3, 0.3, 0.1], 'pose': [0.3031215937997686, 0.7126887402077468, 0.6317924323865397, 0.8686748057453676, -0.28410805507553144, 0.37489763018934996, 0.1553655746388376]}, 'cube26': {'dims': [0.3, 0.3, 0.2], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube27': {'dims': [0.3, 0.3, 0.3], 'pose': [0.0, 3.0, 0.0, 0, 0, 0, 1.0]}, 'cube28': {'dims': [2.0, 2.0, 0.2], 'pose': [0.0, 0.0, -0.1, 0, 0, 0, 1.0]}}}}}]
compressed_world_params_list = [{'world_model': {'coll_objs': {'sphere': {'sphere1': {'radius': 0.1, 'position': [0.9481070843761836, -0.5504134127039761, 0.6187096451807464]}, 'sphere2': {'radius': 0.08, 'position': [-0.17428957806483247, 0.7856183557174176, 0.47815214151938457]}, 'sphere3': {'radius': 0.04, 'position': [-0.7272965946191279, 0.3009223918059427, 0.18170745504756652]}, 'sphere4': {'radius': 0.09, 'position': [0.8575303467282515, -0.45571611297009473, 0.4383135605148688]}, 'sphere5': {'radius': 0.04, 'position': [-0.3700023656895255, -0.17199581157782995, 0.4218274094244757]}, 'sphere6': {'radius': 0.04, 'position': [-0.5357734744985498, 0.402345508689139, 0.2520022492999887]}, 'sphere7': {'radius': 0.07, 'position': [0.44285773108214344, 0.6640265719930828, 0.6553875186074605]}, 'sphere8': {'radius': 0.05, 'position': [0.2948549611698419, -0.564375408013291, 0.40771493738350295]}}, 'cube': {'cube28': {'dims': [2.0, 2.0, 0.2], 'pose': [0.0, 0.0, -0.1, 0, 0, 0, 1.0]}, 'cube1': {'dims': [0.3, 0.1, 0.1], 'pose': [0.49453561611174623, 0.3359035189884687, 0.48803078344225004, -0.14352716555992817, 0.36603919042765676, 0.2904511563561692, 0.8723837398695385]}, 'cube2': {'dims': [0.1, 0.3, 0.2], 'pose': [0.4177846293472868, -0.787512863189118, 0.1733990204722219, 0.12361373048417137, -0.41763408594632573, 0.602011680513357, 0.6692408777241927]}, 'cube3': {'dims': [0.3, 0.2, 0.1], 'pose': [-0.8113658833117179, -0.8745168935824477, 0.5745476547167897, 0.10651264754487068, -0.6634383689730647, 0.6855722769879445, 0.28017001894011967]}, 'cube4': {'dims': [0.1, 0.3, 0.1], 'pose': [0.18468046847893416, -0.27676495446206784, 0.6139689748239938, 0.3186743181785274, 0.17703172363826258, -0.8568559491343359, 0.3645604616414306]}, 'cube5': {'dims': [0.2, 0.3, 0.2], 'pose': [0.5583601776608257, 0.6993372164649275, 0.32844244943043, 0.04680104485697173, 0.3636396010156108, -0.43143087428316185, 0.8242835091694906]}, 'cube6': {'dims': [0.3, 0.1, 0.3], 'pose': [-0.17687417786890702, -0.5064717879333912, 0.4275148973796925, -0.41323272241462966, -0.36564341623544083, -0.812750397149786, 0.18703048206732215]}, 'cube7': {'dims': [0.3, 0.3, 0.1], 'pose': [0.8830783941890297, 0.8408256317725622, 0.6202896960617573, -0.43924866089110365, -0.5238766709762599, -0.4973546745961701, 0.5340900440651759]}, 'cube8': {'dims': [0.1, 0.2, 0.1], 'pose': [0.7942541009871507, 0.6010752787901307, 0.6635516966478058, -0.22890146702344658, 0.9216568257731815, 0.3068717676854141, 0.06310730621605296]}, 'cube9': {'dims': [0.2, 0.1, 0.2], 'pose': [-0.7209461102320838, -0.8477951684499309, 0.37564204964432524, 0.7665657050272212, -0.03413858418737892, 0.4803487369261279, -0.42482545578069364]}, 'cube10': {'dims': [0.1, 0.3, 0.3], 'pose': [0.44819264321441243, 0.504174120604157, 0.48304391578208616, -0.49147765864353987, -0.2894795912763093, 0.4346720191242227, -0.6969300632626179]}, 'cube11': {'dims': [0.2, 0.1, 0.3], 'pose': [-0.18272134342289437, -0.19853565287693498, 0.6505234973202848, -0.18260676820562477, -0.5939817431791405, 0.09705662507969859, 0.7774448330933234]}, 'cube12': {'dims': [0.1, 0.2, 0.2], 'pose': [-0.6512235425578872, 0.987793685612596, 0.6847114614351515, 0.46345317158906163, 0.5865730874903496, -0.37743881699623905, 0.5465190849371666]}, 'cube13': {'dims': [0.3, 0.2, 0.3], 'pose': [0.3970016595188187, -0.6133736915793115, 0.6686461786443482, -0.6580430935742932, -0.5963784144692079, 0.4157381836410311, -0.1961474863902769]}, 'cube14': {'dims': [0.2, 0.2, 0.1], 'pose': [-0.28596400730608007, 0.5478378630189866, 0.399848559187301, 0.324418808800275, 0.26846825980600963, -0.03229009300335833, 0.9064406102261625]}, 'cube15': {'dims': [0.2, 0.3, 0.3], 'pose': [-0.7988253102491426, -0.8009034218579342, 0.4044959121474949, -0.09820968167700189, 0.1902143162307311, 0.6808191174181119, 0.7004703431864913]}, 'cube16': {'dims': [0.1, 0.1, 0.3], 'pose': [-0.6987374518371363, -0.6364590965678762, 0.12353670481965989, -0.45120256223567934, -0.46250856494203874, 0.47491428964791926, -0.5974600343750418]}, 'cube17': {'dims': [0.2, 0.1, 0.1], 'pose': [0.9857729053041304, 0.6722402921217592, 0.6597703842347493, 0.4411819926814173, -0.08940441277891342, -0.45976668856879144, -0.765493234713279]}, 'cube18': {'dims': [0.1, 0.2, 0.3], 'pose': [0.9803312895750173, -0.6745357388723082, 0.28547869684491056, 0.6185624569883936, -0.2690283757087215, 0.6701634011394462, 0.3096534121259101]}, 'cube19': {'dims': [0.3, 0.1, 0.2], 'pose': [-0.5130966039728129, 0.6120836259023413, 0.19913271438638436, 0.1683274829831946, -0.3046970363990945, 0.40844977344549005, 0.8437975806166306]}, 'cube20': {'dims': [0.1, 0.1, 0.2], 'pose': [-0.2885709012664863, 0.4778345344725592, 0.532966528319243, 0.6980838721067888, 0.056250647380763186, -0.7137843150652049, 0.005169500994668452]}, 'cube21': {'dims': [0.2, 0.2, 0.3], 'pose': [0.28541779262753486, -0.8882213922377888, 0.37571503812284035, -0.3544809831513122, 0.45290014931575584, -0.6207033294504894, 0.5328715268645178]}, 'cube22': {'dims': [0.2, 0.3, 0.1], 'pose': [0.7584101376228902, 0.13478517636851486, 0.5455606536704157, -0.9379953807631229, 0.0706299249469384, 0.303947687792146, 0.15096980643440672]}, 'cube23': {'dims': [0.2, 0.2, 0.2], 'pose': [-0.9376855276358355, 0.3394596544521766, 0.6311181892786898, -0.19922410447027267, 0.14167998199228746, -0.3688223028724334, -0.8967756953690025]}, 'cube24': {'dims': [0.3, 0.2, 0.2], 'pose': [0.9270609535906081, 0.29908054808866663, 0.25510853410761763, -0.38595286922706146, 0.0248706718026178, 0.024715890168270464, 0.9218519171714487]}}}}},
                                {'world_model': {'coll_objs': {'sphere': {'sphere1': {'radius': 0.06, 'position': [-0.37832138039829977, -0.3877354690519633, 0.4291515933645803]}, 'sphere2': {'radius': 0.08, 'position': [0.35280653335758627, -0.6778364316104141, 0.4273654445180327]}, 'sphere3': {'radius': 0.04, 'position': [-0.2520217114582065, 0.9536868235755181, 0.4789706528869595]}, 'sphere4': {'radius': 0.05, 'position': [-0.16426503480460075, -0.7615106429497664, 0.25764151874862257]}, 'sphere5': {'radius': 0.07, 'position': [-0.7736227802101716, -0.6488645492401135, 0.5659462935083912]}}, 'cube': {'cube28': {'dims': [2.0, 2.0, 0.2], 'pose': [0.0, 0.0, -0.1, 0, 0, 0, 1.0]}, 'cube1': {'dims': [0.1, 0.2, 0.1], 'pose': [0.2635220042560735, 0.11808254422348963, 0.4840202023943394, -0.613710318166888, -0.026216699032800862, 0.7890636461030393, 0.0071338955626104456]}, 'cube2': {'dims': [0.3, 0.2, 0.3], 'pose': [0.2556984631809891, 0.7367277497523675, 0.6537414735397347, -0.8107800340644726, 0.529621132512091, -0.2239002343528857, -0.10957133482688663]}, 'cube3': {'dims': [0.1, 0.3, 0.3], 'pose': [-0.959003579103874, -0.7098886149983832, 0.6099854566265462, 0.1187336529045486, 0.8593247305003701, 0.07910993258538274, -0.49112620148465397]}, 'cube4': {'dims': [0.2, 0.1, 0.1], 'pose': [-0.29223593071940823, 0.2904035736094489, 0.35336437186726233, -0.8214483550076311, 0.28800961360692323, 0.3686399002937688, -0.32615592350384776]}, 'cube5': {'dims': [0.3, 0.1, 0.2], 'pose': [-0.22509674167968163, 0.4798451239907343, 0.4488755610261148, -0.0969013219257606, -0.007950694446985058, -0.0810096858502212, 0.9919598535552228]}, 'cube6': {'dims': [0.3, 0.2, 0.1], 'pose': [-0.7609422503664184, 0.7985619022764392, 0.28230631507530285, 0.9042349656157422, 0.34436074931005206, 0.17944624116334357, 0.17769031438112826]}, 'cube7': {'dims': [0.1, 0.1, 0.3], 'pose': [-0.19611198594521584, 0.1960088685357547, 0.5209242782066749, -0.45735026708383614, 0.8471224924461737, 0.23474115213939523, 0.13457640016880912]}, 'cube8': {'dims': [0.2, 0.3, 0.2], 'pose': [-0.7569588841458563, -0.3431066587619874, 0.48988858082315156, -0.5832731563769025, 0.4461581953352899, 0.6783089271362496, -0.025145360457802857]}, 'cube9': {'dims': [0.2, 0.3, 0.1], 'pose': [-0.6183866155876524, 0.47044297299368887, 0.4010291969513131, -0.579898653560113, -0.3441668251501638, -0.648335062244187, -0.3534521115088308]}, 'cube10': {'dims': [0.2, 0.1, 0.3], 'pose': [0.40653786131776715, -0.26995554708740677, 0.3493408553725783, -0.8041079103825794, -0.2906352408958686, 0.31187422616500765, 0.4143381375924012]}, 'cube11': {'dims': [0.3, 0.1, 0.3], 'pose': [-0.6209783261922599, -0.4048294770980041, 0.37479131900151774, 0.3973482521870222, -0.7734317371248629, -0.30311254223268447, 0.38992371206836685]}, 'cube12': {'dims': [0.3, 0.3, 0.1], 'pose': [-0.8428958465696756, 0.5525462414549538, 0.1532635382803819, 0.553174841565876, 0.3001021004155507, -0.7001823846731786, 0.3371660602405343]}, 'cube13': {'dims': [0.1, 0.1, 0.2], 'pose': [-0.8071360942536275, -0.6656451863791026, 0.4030067583234721, 0.9371102977572636, -0.11098764513443578, 0.31915798603955253, 0.08743118672408608]}, 'cube14': {'dims': [0.1, 0.3, 0.1], 'pose': [-0.13726320733439878, -0.6100214446548862, 0.6551736416184988, -0.4580160477865864, -0.45317817950677536, -0.11572335467314823, 0.7559490345070051]}, 'cube15': {'dims': [0.2, 0.2, 0.2], 'pose': [0.2755893010600123, 0.23967471034444993, 0.2191446679537482, 0.3698808545675243, 0.7859159449237122, 0.46790371580519063, -0.16306561156406293]}, 'cube16': {'dims': [0.2, 0.3, 0.3], 'pose': [0.6244322260797847, -0.18875154754943668, 0.5645567141657384, -0.21603341590350705, 0.6704427419951381, -0.21680958342772172, -0.6758917793944538]}, 'cube17': {'dims': [0.1, 0.2, 0.3], 'pose': [-0.6129900768093985, -0.8321124040168265, 0.3879025111000959, -0.23369786376058652, 0.45665127171785375, 0.8557375550770496, 0.06758817457927523]}, 'cube18': {'dims': [0.1, 0.3, 0.2], 'pose': [0.6276557333062793, 0.5643027338634771, 0.4635755199234395, -0.5857498832373783, -0.43639404062788245, 0.10030901572575038, 0.6755704381898299]}, 'cube19': {'dims': [0.2, 0.1, 0.2], 'pose': [-0.46613821793544163, 0.9655412064989142, 0.2966435440857067, 0.04205289506512483, -0.8593967261455268, -0.24290308476135836, 0.44795860581130575]}, 'cube20': {'dims': [0.3, 0.2, 0.2], 'pose': [-0.7414727789972382, -0.739407332733673, 0.4534117164994528, 0.7795949203668379, 0.19745359497325188, -0.24390434338422123, -0.5419912446236329]}, 'cube21': {'dims': [0.2, 0.2, 0.3], 'pose': [-0.11402513323837205, 0.17735261907274832, 0.13451319026364558, -0.4223518927737549, 0.5770012826332359, 0.399855373954467, 0.5734144037515629]}, 'cube22': {'dims': [0.1, 0.2, 0.2], 'pose': [0.9779621294944782, -0.404999223590232, 0.4525310694019682, -0.13674873612816094, 0.18724900664644484, 0.8849697872964665, 0.403814398269449]}, 'cube23': {'dims': [0.3, 0.1, 0.1], 'pose': [-0.2001137522033819, -0.8850462377312706, 0.27936707562443985, -0.6220068075238528, -0.10629768693491398, -0.7597825604184696, 0.15664863239181634]}}}}},
                                {'world_model': {'coll_objs': {'sphere': {'sphere1': {'radius': 0.1, 'position': [0.9067789326542612, -0.9444093874655127, 0.4534261597415771]}, 'sphere2': {'radius': 0.04, 'position': [0.946360606579948, -0.16190476592492353, 0.3920184668247989]}, 'sphere3': {'radius': 0.04, 'position': [0.2023555719252127, 0.40706228232410646, 0.362868972273387]}, 'sphere4': {'radius': 0.07, 'position': [0.5296040607148057, -0.24371135079965422, 0.42351458246784435]}, 'sphere5': {'radius': 0.07, 'position': [-0.9481020062400372, 0.1584453544212987, 0.14456083209377943]}, 'sphere6': {'radius': 0.04, 'position': [0.8235445349623186, 0.5725144743414579, 0.6989786580538326]}, 'sphere7': {'radius': 0.09, 'position': [0.682173632817741, -0.2199364500549913, 0.4119907810241382]}, 'sphere8': {'radius': 0.05, 'position': [-0.6856227171995166, 0.7368910550138528, 0.21418509596985824]}, 'sphere9': {'radius': 0.06, 'position': [-0.4958897457004722, 0.2548073502257765, 0.644275930495733]}, 'sphere10': {'radius': 0.08, 'position': [0.9098022189741913, -0.9030811538439185, 0.12541108395000602]}}, 'cube': {'cube28': {'dims': [2.0, 2.0, 0.2], 'pose': [0.0, 0.0, -0.1, 0, 0, 0, 1.0]}, 'cube1': {'dims': [0.2, 0.2, 0.1], 'pose': [0.525888276216214, -0.8116430350460352, 0.3129533733621759, 0.34313591030447504, 0.677837146308228, -0.4981976580430899, 0.4178440422748872]}, 'cube2': {'dims': [0.1, 0.2, 0.1], 'pose': [0.487067811495438, 0.4633250871329436, 0.5795166602530687, -0.4175073752099292, 0.4154232128766047, 0.7555010706741664, -0.2869307896667467]}, 'cube3': {'dims': [0.2, 0.3, 0.2], 'pose': [0.7965145519428479, -0.49012097679528677, 0.48812082706392923, -0.4082776078944923, 0.05746780284880193, -0.778948342607743, 0.4724894983767709]}, 'cube4': {'dims': [0.3, 0.1, 0.1], 'pose': [0.1572197579229153, 0.7700755339653845, 0.5177165395390747, -0.42696050388943085, -0.16105407516386563, 0.6392727838756878, -0.6189479952204574]}, 'cube5': {'dims': [0.3, 0.3, 0.1], 'pose': [-0.5300526488373092, -0.10368131457971774, 0.18016589259925878, -0.4646273250754599, -0.33800667330092066, 0.8039642145456152, -0.15334431625371642]}, 'cube6': {'dims': [0.2, 0.1, 0.1], 'pose': [0.44501560150997166, -0.7914771182080461, 0.20227906406145527, -0.003063463240554347, 0.03487464591694511, -0.2325813374772902, 0.9719466527142403]}, 'cube7': {'dims': [0.3, 0.2, 0.3], 'pose': [0.7547039777223358, -0.8969017268291538, 0.5389150811221136, 0.3215897618789463, -0.2033177561004319, 0.0963023211983027, 0.9197650667647401]}, 'cube8': {'dims': [0.2, 0.1, 0.3], 'pose': [0.32905957605581604, -0.5180660602261677, 0.5533776413187553, 0.1491258875127641, 0.7518988815714968, 0.16554166063603037, -0.6204881144380833]}, 'cube9': {'dims': [0.2, 0.3, 0.3], 'pose': [-0.6193551890695976, 0.18814062009358945, 0.4728749478583948, -0.6488519466815477, 0.15696788903582937, -0.374519066714978, -0.6434964660090555]}, 'cube10': {'dims': [0.1, 0.3, 0.2], 'pose': [-0.15430452292664298, -0.81555312060364, 0.6318140562081684, 0.09252253184465858, 0.6220862655895633, 0.26073383847035436, 0.7324384784692846]}, 'cube11': {'dims': [0.2, 0.1, 0.2], 'pose': [0.9268778022830811, 0.3641853127080845, 0.13208670337218148, 0.2673716696896387, 0.7497806983325754, 0.6052452239833387, 0.004417408816083768]}, 'cube12': {'dims': [0.2, 0.3, 0.1], 'pose': [-0.12567585865351583, -0.7529320444512472, 0.5389732361615666, 0.8118529184205588, -0.1535596645362592, -0.5625955077179201, -0.02829422158583958]}, 'cube13': {'dims': [0.3, 0.2, 0.1], 'pose': [-0.5440767816860299, 0.4758877047411635, 0.6836238443509777, 0.23167887787596925, 0.5533226451804657, -0.4188765609778907, 0.6816900868722969]}, 'cube14': {'dims': [0.3, 0.2, 0.2], 'pose': [-0.1836709552317929, 0.6423537287979247, 0.6129948645810223, -0.4174110456066666, 0.5963540571487989, -0.4088642856196618, -0.5504178898550084]}, 'cube15': {'dims': [0.1, 0.3, 0.1], 'pose': [0.3392502599864388, 0.1371987860234807, 0.5348086885310341, 0.810592625149438, 0.04229091735824389, -0.35523515502277053, 0.4636367748553698]}, 'cube16': {'dims': [0.1, 0.1, 0.3], 'pose': [0.8948132464222636, -0.8147246562527972, 0.5401711403815769, 0.20114367067937894, 0.43805000492665874, -0.027523793133533703, 0.875725903317312]}, 'cube17': {'dims': [0.3, 0.1, 0.2], 'pose': [0.40548802211105783, -0.12488602567787532, 0.3661122354048346, 0.15152813321299868, -0.4113096141631562, -0.8968615522001381, -0.05918599772833455]}, 'cube18': {'dims': [0.1, 0.1, 0.2], 'pose': [0.5974740725838175, -0.5515318856509139, 0.23008413372984082, 0.3092340318533266, 0.30491659124032133, 0.10893725015631324, 0.8941660144841668]}, 'cube19': {'dims': [0.2, 0.2, 0.2], 'pose': [-0.48689547316228177, 0.24466872658920352, 0.5475576234588757, -0.06560007679217819, 0.8032469235028645, -0.5275324124163459, 0.2687016257082088]}, 'cube20': {'dims': [0.1, 0.3, 0.3], 'pose': [-0.4350458887077354, 0.7965435749329128, 0.6324874508301038, 0.7912367254107631, -0.15092798114167197, 0.5346861355056804, -0.2554915367830273]}, 'cube21': {'dims': [0.1, 0.2, 0.3], 'pose': [0.5127597970323454, -0.9999450409268199, 0.37309130470008767, 0.217305925947522, 0.8642186049746322, -0.428704437165587, 0.14871732554859948]}, 'cube22': {'dims': [0.1, 0.2, 0.2], 'pose': [-0.7848540844680505, -0.5259888942994708, 0.1426205354841895, 0.6357783896276281, -0.3062069734454784, -0.16193532634766214, 0.6897826315416592]}, 'cube23': {'dims': [0.3, 0.1, 0.3], 'pose': [0.7905246298664247, -0.9151315118332102, 0.5336130760450862, -0.33651485071676535, -0.6090884056599387, -0.352829082017156, 0.625524346625004]}, 'cube24': {'dims': [0.2, 0.2, 0.3], 'pose': [-0.5166351099285043, 0.6988779184056413, 0.679424301144884, -0.3577603144978858, 0.4737006070513898, 0.5347694758728356, 0.6013625361828017]}}}}},
                                {'world_model': {'coll_objs': {'sphere': {'sphere1': {'radius': 0.06, 'position': [-0.19144791068733713, 0.7234105363350212, 0.6323643067290861]}, 'sphere2': {'radius': 0.08, 'position': [-0.6469991081293129, 0.3765149817520048, 0.6660893380467273]}, 'sphere3': {'radius': 0.04, 'position': [0.7275304522941893, 0.7395547870580864, 0.10642473808718783]}, 'sphere4': {'radius': 0.05, 'position': [0.9938668044499609, -0.562603577168077, 0.3048124665349571]}, 'sphere5': {'radius': 0.04, 'position': [-0.561544561386512, 0.6078631927998304, 0.181882180552069]}}, 'cube': {'cube28': {'dims': [2.0, 2.0, 0.2], 'pose': [0.0, 0.0, -0.1, 0, 0, 0, 1.0]}, 'cube1': {'dims': [0.1, 0.1, 0.3], 'pose': [-0.11411153857820688, -0.6065830165577386, 0.34456216171401977, 0.3438360545624862, 0.8579847542316185, 0.028608360918169207, 0.3805528751364101]}, 'cube2': {'dims': [0.2, 0.3, 0.3], 'pose': [0.962673866193605, -0.33835669289728865, 0.22758482532147767, 0.17196529518283832, 0.9792057998771577, 0.07418631833831954, -0.07797646382736766]}, 'cube3': {'dims': [0.1, 0.3, 0.1], 'pose': [-0.6151813416797121, 0.5032141265863607, 0.6756152140010809, -0.025294792567059077, -0.7117979097274423, -0.04725298547832252, 0.700336393842287]}, 'cube4': {'dims': [0.3, 0.1, 0.3], 'pose': [0.3291397466270727, -0.722275244067013, 0.3463681677308743, 0.3673570399967774, -0.8796220750468323, 0.2821237409986359, -0.10825897200715331]}, 'cube5': {'dims': [0.3, 0.3, 0.1], 'pose': [0.7525943946353151, -0.6361468076528776, 0.34263600218441986, 0.36345475958017426, 0.474734184510208, 0.7983608739378791, 0.07174961157450013]}, 'cube6': {'dims': [0.3, 0.1, 0.1], 'pose': [0.7479315977729042, 0.848213620023954, 0.49047739915896804, -0.09852815195020186, 0.7341741712143725, 0.608560284607355, 0.2844905439440515]}, 'cube7': {'dims': [0.1, 0.2, 0.3], 'pose': [-0.561575402337337, -0.3948384053185364, 0.13853538307868815, -0.12324395347345829, 0.9415510107222752, 0.14081296900992862, 0.2801148512640897]}, 'cube8': {'dims': [0.2, 0.3, 0.2], 'pose': [-0.7302023598624116, 0.6028464423842766, 0.44927067402638, 0.7985671699737087, 0.09269053040158734, -0.5935653089820666, -0.03713710525980585]}, 'cube9': {'dims': [0.3, 0.2, 0.1], 'pose': [0.48265371111995103, -0.453853305270684, 0.40940525360255187, -0.5811706815675076, -0.36391794769501196, -0.31198940417553456, 0.657622215191978]}, 'cube10': {'dims': [0.2, 0.2, 0.3], 'pose': [-0.41927404845830685, -0.5371929267693943, 0.25263133446747416, -0.6441247872995424, 0.22555902424345375, 0.7106493476493123, 0.17089145576730042]}, 'cube11': {'dims': [0.3, 0.2, 0.2], 'pose': [0.8498116034664474, -0.9215792022003271, 0.1940252652206355, 0.18962267499960134, 0.6935955611317919, 0.09879229466288575, 0.6879015345378376]}, 'cube12': {'dims': [0.2, 0.1, 0.2], 'pose': [-0.478668499621686, -0.7229416671374672, 0.6466149525743597, 0.5367985789518336, -0.35872472695806046, 0.6629577287106927, 0.3790130681743265]}, 'cube13': {'dims': [0.3, 0.1, 0.2], 'pose': [0.8782432645962939, -0.3447063881144333, 0.13511200944876017, -0.35201313983406307, 0.22069761160890763, 0.9077555966726538, 0.057957659750566534]}, 'cube14': {'dims': [0.1, 0.3, 0.3], 'pose': [0.8646620382348356, -0.346185534996729, 0.6862882612894563, 0.46048055390494214, -0.3388856622635292, 0.2976222165197222, 0.7645490066840022]}, 'cube15': {'dims': [0.1, 0.2, 0.1], 'pose': [-0.1429120936159448, 0.6039184446692931, 0.25615831998224603, -0.04881524321530409, 0.6977003951903649, 0.06007867154442115, 0.7121950461822218]}, 'cube16': {'dims': [0.2, 0.1, 0.1], 'pose': [-0.46168462192523163, 0.37672414819786415, 0.13772396083679467, -0.31567657109479963, -0.8197270411768139, 0.41566915857444964, -0.23582839319162785]}, 'cube17': {'dims': [0.1, 0.2, 0.2], 'pose': [0.8306512792554447, -0.4023766282523742, 0.6001147000751407, -0.5138449710819742, -0.2854010293490123, 0.406963761805774, 0.6992067610636946]}, 'cube18': {'dims': [0.2, 0.3, 0.1], 'pose': [0.5141775086805417, -0.7960775854457925, 0.1950926661390312, -0.5089279050018759, 0.25414104640665697, -0.1876847471188455, 0.8007366306974262]}, 'cube19': {'dims': [0.2, 0.1, 0.3], 'pose': [-0.75397864386998, -0.7873947039781742, 0.30032010149570015, -0.4463862754384194, -0.5067280780678027, -0.5365306561102947, 0.506064030584849]}, 'cube20': {'dims': [0.1, 0.1, 0.2], 'pose': [0.8998198896207912, -0.6887509442279718, 0.5565754585069561, 0.13472158166540774, -0.2737336913482846, 0.7931331022036447, 0.5271241256509095]}, 'cube21': {'dims': [0.3, 0.2, 0.3], 'pose': [0.7163503294518865, 0.2417681525920289, 0.24627475478613864, -0.008028156575861423, 0.2968755463932999, -0.6552467393228818, 0.6945877693009032]}}}}},
                                {'world_model': {'coll_objs': {'sphere': {'sphere1': {'radius': 0.08, 'position': [-0.5612756080798049, 0.47507042895895857, 0.4140839084935152]}, 'sphere2': {'radius': 0.04, 'position': [0.6684297628321552, -0.34109477439586533, 0.2329714879606224]}, 'sphere3': {'radius': 0.09, 'position': [-0.6347561796113574, -0.4597971235101076, 0.17164602669425544]}, 'sphere4': {'radius': 0.05, 'position': [0.6552266869717717, 0.5982535552640118, 0.2171400108321877]}, 'sphere5': {'radius': 0.06, 'position': [0.16295832456776654, 0.38265043858924386, 0.4131567751802975]}, 'sphere6': {'radius': 0.04, 'position': [0.8738976144713015, 0.28055755174410074, 0.6325769791479788]}, 'sphere7': {'radius': 0.07, 'position': [0.9488586235751127, 0.545434665071403, 0.43534929728259675]}, 'sphere8': {'radius': 0.04, 'position': [-0.9513333191909017, 0.5185188973113952, 0.3724908373830128]}}, 'cube': {'cube28': {'dims': [2.0, 2.0, 0.2], 'pose': [0.0, 0.0, -0.1, 0, 0, 0, 1.0]}, 'cube1': {'dims': [0.1, 0.3, 0.2], 'pose': [-0.36156774011095527, -0.2742290342095498, 0.5492378178480342, -0.03433789292340769, 0.6584614825109405, 0.621659092864317, 0.4228349056288868]}, 'cube2': {'dims': [0.2, 0.1, 0.3], 'pose': [-0.4404544392760056, -0.4806593396482949, 0.2487037030485586, -0.38174085020607995, -0.19733801655786598, -0.886475556799369, 0.17173443947617328]}, 'cube3': {'dims': [0.1, 0.2, 0.1], 'pose': [0.6412900969108972, 0.3132818404434797, 0.41483206431271524, 0.14311118786656285, -0.46210150096917274, -0.7361095816830704, 0.47341744207816644]}, 'cube4': {'dims': [0.1, 0.1, 0.3], 'pose': [-0.796430598542748, -0.8049858011934246, 0.6098324442169084, 0.08035916158493385, -0.9428664408075477, 0.006403261663724773, 0.3232712145990415]}, 'cube5': {'dims': [0.3, 0.1, 0.2], 'pose': [-0.9428734411532895, 0.40898670510767343, 0.1416705808042717, -0.16183363802834874, 0.9643321587322381, -0.18494587107937022, 0.09832795130594207]}, 'cube6': {'dims': [0.2, 0.3, 0.1], 'pose': [0.32611606322430275, -0.7595718625564515, 0.13257033141260144, 0.7685831163576476, -0.15477029053735292, 0.08546986676643935, 0.6148341664968507]}, 'cube7': {'dims': [0.1, 0.2, 0.3], 'pose': [-0.6281179587900078, 0.8826295236953688, 0.14889475909343936, -0.4739913071007666, 0.24225804879435306, 0.8247486130007546, 0.19087431451243314]}, 'cube8': {'dims': [0.3, 0.2, 0.1], 'pose': [-0.9059592628707093, -0.8088639935752931, 0.14203466273582654, -0.14207427902968933, 0.7428665218134111, -0.6425046212826644, 0.12309362955676748]}, 'cube9': {'dims': [0.2, 0.2, 0.2], 'pose': [0.1351038072650143, 0.5461112221233057, 0.15439276302692878, -0.43961537313335314, 0.4038955430936363, -0.7815969243260876, 0.18086724926840447]}, 'cube10': {'dims': [0.3, 0.1, 0.3], 'pose': [0.15133797653489983, -0.44641804989390965, 0.15640433708225737, -0.3992715015728299, 0.5311491609611414, 0.1481278451198065, 0.7324759233873941]}, 'cube11': {'dims': [0.3, 0.1, 0.1], 'pose': [-0.40603592355134654, 0.48074325776321747, 0.15870441109495717, -0.015958173596539116, 0.8781615589104096, 0.28538724077479993, 0.3835775488091663]}, 'cube12': {'dims': [0.2, 0.2, 0.3], 'pose': [0.37628697379145437, -0.9763470482600467, 0.5708243811578809, -0.4766867753760755, 0.2979314640843647, -0.7372992230447862, 0.37469509816337404]}, 'cube13': {'dims': [0.2, 0.1, 0.2], 'pose': [0.5886180800250993, 0.2070724629890323, 0.6641365360325289, -0.49573668505028745, 0.46872783909908067, -0.7068554396490139, 0.1868013366854154]}, 'cube14': {'dims': [0.2, 0.2, 0.1], 'pose': [0.5473603320592594, -0.7010413957951018, 0.2805807158962119, 0.4178393763719857, -0.8909591956680797, -0.1158095621413099, 0.13487072523048427]}, 'cube15': {'dims': [0.3, 0.2, 0.3], 'pose': [-0.27049323252206314, 0.9677866542638253, 0.511197613991598, -0.3653720085518801, -0.5645476076084249, -0.7379058535362394, 0.05730833645572625]}, 'cube16': {'dims': [0.2, 0.3, 0.3], 'pose': [0.3869055204953593, -0.8024296018467095, 0.17527187168288352, -0.17926192857461296, 0.691080546161867, 0.6328388491042506, 0.29964617592209236]}, 'cube17': {'dims': [0.3, 0.2, 0.2], 'pose': [0.9470598125226133, -0.5085937041853221, 0.47941720876876714, 0.2627162556609807, -0.6304804543556106, 0.2274285651951037, 0.6940827136734595]}, 'cube18': {'dims': [0.1, 0.3, 0.3], 'pose': [0.3104895215988245, -0.5347084512061937, 0.20540737074125587, 0.6315424478635768, -0.27735001233962847, 0.6705528117833527, 0.27311176066059273]}, 'cube19': {'dims': [0.3, 0.3, 0.1], 'pose': [-0.6012488672812647, 0.958859938896522, 0.1548920084807081, -0.8782558390820878, 0.4505159383008209, 0.13076474530097315, 0.09275048162419555]}, 'cube20': {'dims': [0.1, 0.2, 0.2], 'pose': [0.9253693120730041, -0.8129382821307755, 0.6376212519452161, 0.5629184509017525, 0.7594814616559326, 0.19872698659781235, -0.25849238254364937]}, 'cube21': {'dims': [0.1, 0.1, 0.2], 'pose': [-0.19671770610594141, 0.12000145422879092, 0.6605874249494306, 0.18444124010625668, 0.16110562305353182, -0.9555671779352323, 0.16406637565782847]}, 'cube22': {'dims': [0.2, 0.1, 0.1], 'pose': [0.15536333223235044, -0.9400162763062404, 0.568777907403111, -0.6608967188102174, 0.5463778117615752, 0.3383401927411541, 0.3875728678021722]}}}}},
                                {'world_model': {'coll_objs': {'sphere': {'sphere1': {'radius': 0.05, 'position': [-0.8423842401791755, 0.8848050985010317, 0.41578757565062696]}, 'sphere2': {'radius': 0.04, 'position': [0.40302044975901374, 0.9063534928548584, 0.46076300864619846]}, 'sphere3': {'radius': 0.04, 'position': [0.6025822573918012, -0.41142582036629494, 0.2140904077558256]}, 'sphere4': {'radius': 0.04, 'position': [0.6690016109776898, 0.46950877129711277, 0.11343164030722525]}, 'sphere5': {'radius': 0.08, 'position': [0.9320446043632116, -0.8166889553272632, 0.3097716102438059]}}, 'cube': {'cube28': {'dims': [2.0, 2.0, 0.2], 'pose': [0.0, 0.0, -0.1, 0, 0, 0, 1.0]}, 'cube1': {'dims': [0.1, 0.1, 0.3], 'pose': [0.3152019197943522, 0.7018040626273029, 0.2597187016702907, -0.7012423240432287, 0.15841040015151883, -0.6243668217057918, -0.305501914965021]}, 'cube2': {'dims': [0.2, 0.2, 0.1], 'pose': [0.8005589453292824, -0.5432149745574193, 0.2607121471875426, 0.05648647979133942, 0.3833235487380754, 0.7597191988111964, 0.5222059685040997]}, 'cube3': {'dims': [0.1, 0.3, 0.1], 'pose': [-0.995586833728858, -0.8342221792081634, 0.4890419129657595, 0.4104587973689276, -0.12266349550063145, -0.764395713832143, -0.4818469001758431]}, 'cube4': {'dims': [0.2, 0.2, 0.3], 'pose': [0.7297956783757396, 0.5932894502075824, 0.509049708912268, 0.2126502734082056, -0.37305336586421145, -0.19110185316455786, -0.8826613898624263]}, 'cube5': {'dims': [0.2, 0.3, 0.2], 'pose': [0.24831364426240846, 0.789084997922615, 0.11168609888043246, -0.8321984878852737, -0.13758632841501156, 0.24896996278428948, 0.47595129648518647]}, 'cube6': {'dims': [0.1, 0.3, 0.3], 'pose': [0.1696509368148431, 0.692268493593836, 0.1697255109255716, -0.2583634533424303, 0.3413170702557405, 0.629119037430354, 0.6488144729209702]}, 'cube7': {'dims': [0.1, 0.3, 0.2], 'pose': [-0.6617087825831629, 0.27022048765931744, 0.3448757208162526, 0.6829535227470074, 0.12075349679119374, -0.7167591351586606, 0.07245288777378711]}, 'cube8': {'dims': [0.2, 0.3, 0.3], 'pose': [0.15629880575587415, 0.4120241163574683, 0.4379751197940105, -0.5313159539333948, 0.16167844950918742, 0.692441653057081, 0.46053012189402853]}, 'cube9': {'dims': [0.2, 0.1, 0.3], 'pose': [0.49412623928001476, -0.8597560226238047, 0.2623254504562114, -0.7458609945525592, 0.0929340121396145, 0.4518939112758935, -0.48046491978548894]}, 'cube10': {'dims': [0.2, 0.3, 0.1], 'pose': [-0.7722313019439243, 0.7066637090462585, 0.40505016132674354, -0.4173930909237214, -0.33832788105966477, -0.2845846463309195, 0.7939325107460486]}, 'cube11': {'dims': [0.1, 0.2, 0.3], 'pose': [0.6783681959919152, 0.9468660042905354, 0.44082416257889123, 0.9203599581285508, -0.29775502561748834, -0.04535985847006981, 0.24944333110491504]}, 'cube12': {'dims': [0.3, 0.1, 0.1], 'pose': [0.34539245157747617, 0.19048962421919413, 0.539164310865639, 0.21894013083934727, -0.9014978545487706, 0.2856757011460416, 0.24032526110821253]}, 'cube13': {'dims': [0.3, 0.2, 0.1], 'pose': [-0.8967822138157061, -0.9802763467176367, 0.616434311217649, 0.5177120308753631, 0.3664420212202224, -0.7547904461901079, -0.16728980994395054]}, 'cube14': {'dims': [0.3, 0.3, 0.1], 'pose': [0.3031215937997686, 0.7126887402077468, 0.6317924323865397, 0.8686748057453676, -0.28410805507553144, 0.37489763018934996, 0.1553655746388376]}, 'cube15': {'dims': [0.3, 0.1, 0.3], 'pose': [0.6564869946977611, -0.3819293388799977, 0.27810878623031215, -0.26412027211227007, 0.6212913335843333, 0.18584098877622585, 0.7139332514759456]}, 'cube16': {'dims': [0.1, 0.1, 0.2], 'pose': [-0.23463318293898494, -0.9673036684297861, 0.6453460376908009, 0.5099060472578737, -0.24924986059728038, 0.1309072001985827, 0.8128552361264925]}, 'cube17': {'dims': [0.1, 0.2, 0.1], 'pose': [-0.37318945167664885, 0.9224328892336854, 0.5490149074802434, -0.5820228730501412, 0.6340728702055766, 0.35784837582957024, 0.3621401806370843]}, 'cube18': {'dims': [0.3, 0.1, 0.2], 'pose': [0.757837643157532, -0.251313112417176, 0.5969076385711276, 0.5447216727071417, -0.7196624893553777, -0.4284969152233009, 0.041887878223533986]}, 'cube19': {'dims': [0.1, 0.2, 0.2], 'pose': [-0.6334718485164459, 0.8369944112152312, 0.2981994108357765, -0.12208262433341403, 0.6789001242691977, 0.701374317244556, 0.17962327581042384]}, 'cube20': {'dims': [0.2, 0.1, 0.2], 'pose': [0.634249850618197, 0.44607915423848277, 0.21810385159487103, 0.5865093762082682, -0.3479181386146768, -0.6752883661657325, -0.2809721391239751]}, 'cube21': {'dims': [0.2, 0.2, 0.2], 'pose': [0.46374387975011744, 0.6568008783523719, 0.5855451419106174, 0.1438314541483794, -0.9651671210411552, -0.07430155106488354, 0.20553398932547176]}, 'cube22': {'dims': [0.3, 0.2, 0.3], 'pose': [-0.9761608992662257, -0.7883328964996918, 0.3524828043086178, -0.5279653707643334, -0.5574776501612451, -0.5688772797211168, 0.29470303266420333]}, 'cube23': {'dims': [0.2, 0.1, 0.1], 'pose': [0.4052060619471991, 0.8637001171408499, 0.49995413335144523, -0.5620465748187163, 0.3838718569285294, 0.1576847008557109, 0.7154589997399128]}}}}}]
p_list = [[0.44653127202393506, 0.1668844344429702, 0.3768079779916621],
          [-0.28302897505756974, 0.11599677258702112, 0.5709361012747033],
          [-0.1892616050388667, 0.6145302082513638, 0.3080021260070611],
          [-0.604449772405149, 0.3609446992391957, 0.25703845250245566],
          [0.38521224203636917, 0.3256867513160965, 0.23004168016492],
          [-0.4895582021984777, 0.02213171632773203, 0.1480694649003938]]
q_list = [[0.4146387727380216, -0.38294995859790976, 0.6123508556397315, 0.5535796663078],
          [-0.26484402132756685, 0.597015292713827, -0.40957097413681304, 0.6369317088805431],
          [0.9101379210535577, 0.1967737563227414, -0.25802568108734514, 0.2575884341005202],
          [0.14337814838813626, -0.05511570556492004, 0.17304983720324624, 0.9728610997510388],
          [0.6850944927269871, 0.05900626976761275, 0.6943807034646858, 0.21213023079974228],
          [-0.5731224864529111, -0.28861682231262575, -0.38016811946702006, -0.6661104610656589]]

# General helper functions

def get_all_actor_handles(gym, env):
    
    num_actors = gym.actor_count(env)
    handles = [-1] * num_actors
    for i in range(num_actors):
        handles[i] = gym.get_actor_handle(env, i)
    return handles
    
def get_actor_name(gym, env, actor_handle):
    return gym.get_actor_name(env, actor_handle)


def make_plot(x:Union[None,tuple]=None, ys:list=[]):
    # figure: The top level container for all the plot elements.
    # Axes: An Axes object encapsulates all the elements of an individual (sub-)plot in a figure.
    # pyplot: matplotlib.pyplot is a state-based interface to matplotlib. It provides an implicit, MATLAB-like, way of plotting. It also opens figures on your screen, and acts as the figure GUI manager.
    y_labels = [''] * len(ys)
    
    if x is not None and x[1] is not None: # x label passed
        plt.xlabel(x[1])
        
    for i,y in enumerate(ys):
        y_values = y[0]
        y_label = y[1]
        
        if x is None or x[0] is None: # did not pass x values  
            plt.plot(y_values)
        else: # passed x values
            plt.plot(x[1], y_values)
    
        y_labels[i] = y_label 
    plt.legend(y_labels, loc="upper right")        
    plt.show()
        
    

# Functions for converting gym objects to numpy vectors
def pose_as_ndarray(pose:gymapi.Transform) -> np.ndarray:
        """Converting a pose from a Transform object to a np.array in length 7 (indices 0-2 = position, 3-6 = rotation) """
        # get pos and rot as ndarray
        pos_np = pos_as_ndarray(pose.p)
        rot_np = rot_as_ndarray(pose.r)
        
        # concatenate to one vector in length 7
        return np.concatenate([pos_np, rot_np]) 

def pos_as_ndarray(pos:gymapi.Vec3) -> np.ndarray:
    
    """
    cast pos from gymapi.Vec3 to an ndarray in length 3 (np array - vector)
    """
    
    return np.array([pos.x, pos.y, pos.z])
    
def rot_as_ndarray(rot:gymapi.Quat) -> np.ndarray:
    
    """
    cast rot from gymapi.Quat to an ndarray in length 4 (np array - vector)
    """
    
    return np.array([rot.x, rot.y, rot.z, rot.w])

# Error measurment functions:
def pose_error(curr_pose:gymapi.Transform, goal_pose:gymapi.Transform)-> np.float64:
    """
    return l2 norm between current and desired poses (each pose is both positon and rotation)  
    """
    return np.linalg.norm(pose_as_ndarray(curr_pose) - pose_as_ndarray(goal_pose))  


def pos_error(curr_pos:gymapi.Vec3, goal_pos:gymapi.Vec3)-> np.float64:
    """
    return l2 norm between current and desired positions (position is only the spacial location in environment ("x,y,z" coordinates))
    """
    return np.linalg.norm(pos_as_ndarray(curr_pos) - pos_as_ndarray(goal_pos)) 
    
def rot_error(curr_rot:gymapi.Quat, goal_rot:gymapi.Quat)-> np.float64:
    """
    return l2 norm between current and desired rotations (each rotation is the quaternion - a 4 length vector)  
    """
    
    return np.linalg.norm(rot_as_ndarray(curr_rot) - rot_as_ndarray(goal_rot)) 

 
def gui_draw_lines(gym_instance,mpc_control,w_robot_coord):
    """
    Drawing the green (good) & red (bed) trajectories in gui, at every real-world time step
    """
    # >>>>> Dan - removing the red and green colors from screen. Comment out to see what happens >>>>>>>>>>
    gym_instance.clear_lines()
    # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    
    top_trajs = mpc_control.top_trajs.cpu().float()#.numpy()
    n_p, n_t = top_trajs.shape[0], top_trajs.shape[1]
    w_pts = w_robot_coord.transform_point(top_trajs.view(n_p * n_t, 3)).view(n_p, n_t, 3)

    # >>>>> Dan - this block is making the green/red lines (good/bad trajectories) in gui at every step in gui. comment it out to see >>> 
    top_trajs = w_pts.cpu().numpy()
    color = np.array([0.0, 1.0, 0.0])
    for k in range(top_trajs.shape[0]):
        pts = top_trajs[k,:,:]
        color[0] = float(k) / float(top_trajs.shape[0])
        color[1] = 1.0 - float(k) / float(top_trajs.shape[0])
        gym_instance.draw_lines(pts, color=color)
    
# GPU usage profiling functions
def start_mem_profiling():
    """
    start profiling gpu memory consumption.
    ref: https://pytorch.org/docs/stable/torch_cuda_memory.html
    """
    torch.cuda.memory._record_memory_history(max_entries=100000)
    
def finish_mem_profiling(output_path):
    """
    stop profiling memory and save it to output path
    drag and drop output file here to analyze: https://pytorch.org/memory_viz
    """
    
    torch.cuda.memory._dump_snapshot(output_path)    
    print(f"memory usage profile was saved to {output_path}")

class MpcRobotInteractive:
    """
    This class is for controlling the arm base and simulator.
    It contains the functions for RL learning.
    Operations to control the simulation
    TODO: Don't really like this class. This class should be called "Controller" or "Actions for simulation" since thats what it is
    """
    def __init__(self, args, gym_instance: Gym, bgu_cfg:dict):
        """ 

        Args:
            args (_type_): _description_
            gym_instance (_type_): 
            bgu_cfg (dict): new parameters. Added to simplify code, improve readibility and more. 
        """
        
        self.gui_settings = bgu_cfg['gui']    

            
        self.args = args
        self.gym_instance = gym_instance
        
        # RL variables
        
        self.ee_pose_storm_cs = (np.zeros(3) ,np.zeros(4)) # position, quaternion
        self.goal_pose = [0,0,0,0,0,0,1]
        # self.arm_configuration = None
        self.objects_configuration = None

        self.vis_ee_target = self.gui_settings['render_ee_icons']   # Display "red cup" (the end goal state/effector target location) in gui. Not effecting algorithm (navigation to target), just its representation in gui.
        
        # config files 
        self.robot_file = self.args.robot + '.yml' # collision spheres settings of the robot for each link (center, radius)
        self.task_file = self.args.robot + '_reacher.yml' # task settings:  robot urdf, cost params, mpc (mppi) params and more 
        self.world_file = 'collision_primitives_3d_origina2.yml' # world settings: assets in the world (except the franka)

        # Simulator variables
        # self.pose = None # Goal pose in simulation
        self.gym = self.gym_instance.gym
        self.sim = self.gym_instance.sim
        self.world_yml = join_path(get_gym_configs_path(), self.world_file)

        with open(self.world_yml) as file:
            self.world_params = yaml.load(file, Loader=yaml.FullLoader)
        # print(f"self.world_params: {self.world_params}")

        self.robot_yml = join_path(get_gym_configs_path(),self.args.robot + '.yml')
        with open(self.robot_yml) as file:
            self.robot_params = yaml.load(file, Loader=yaml.FullLoader)
        self.sim_params = self.robot_params['sim_params']
        self.sim_params['asset_root'] = get_assets_path()
        
        if(self.args.cuda):
            self.device = 'cuda'
        else:
            self.device = 'cpu'

        self.sim_params['collision_model'] = None
        # create robot simulation:
        self.robot_sim = RobotSim(gym_instance=self.gym, sim_instance=self.sim, **self.sim_params, device=self.device)

        # create gym environment:
        self.robot_pose = self.sim_params['robot_pose']
        self.env_ptr = self.gym_instance.env_list[0]
        self.robot_ptr = self.robot_sim.spawn_robot(self.env_ptr, self.robot_pose, coll_id=2)
        
        # torch & cuda args
        self.device = torch.device('cuda', 0) 
        self.tensor_args = {'device':self.device, 'dtype':torch.float32}
    
        # spawn camera:
        self.robot_camera_pose = np.array([1.6,-1.5, 1.8,0.707,0.0,0.0,0.707])
        self.q = as_float_array(from_euler_angles(-0.5 * 90.0 * 0.01745, 50.0 * 0.01745, 90 * 0.01745))
        self.robot_camera_pose[3:] = np.array([self.q[1], self.q[2], self.q[3], self.q[0]])
        self.robot_sim.spawn_camera(self.env_ptr, 60, 640, 480, self.robot_camera_pose) 

        # get pose
 
        self.w_T_r = copy.deepcopy(self.robot_sim.spawn_robot_pose)  # Deep copy the robot's initial pose (position and orientation) after being spawned in the simulation
        self.w_T_robot = torch.eye(4)  # Create a 4x4 identity matrix to represent the transformation matrix of the robot in the world frame (homogeneous transformation matrix)

        # Extract the quaternion (orientation) from the robot's pose (self.w_T_r) and create a tensor for it
        # Quaternions are typically represented as (w, x, y, z)
        self.quat = torch.tensor([self.w_T_r.r.w, self.w_T_r.r.x, self.w_T_r.r.y, self.w_T_r.r.z]).unsqueeze(0)

        # Convert the quaternion to a rotation matrix (3x3 rotation matrix from the quaternion)
        self.rot = quaternion_to_matrix(self.quat)

        # Set the translation (position) part of the homogeneous transformation matrix # 
        self.w_T_robot[0, 3] = self.w_T_r.p.x  # Set x-position
        self.w_T_robot[1, 3] = self.w_T_r.p.y  # Set y-position
        self.w_T_robot[2, 3] = self.w_T_r.p.z  # Set z-position

        # Set the rotation part of the transformation matrix (top-left 3x3 block is the rotation matrix)
        self.w_T_robot[:3, :3] = self.rot[0]  # The first 3x3 block represents the rotation part

        # initiate world
        self.world_instance: World = World(self.gym, self.sim, self.env_ptr, self.world_params, w_T_r=self.w_T_r) 

        # define obstacles in world
        self.table_dims = np.ravel([1.5,2.5,0.7])
        self.cube_pose = np.ravel([0.35, -0.0,-0.35,0.0, 0.0, 0.0,1.0])
        self.cube_pose = np.ravel([0.9,0.3,0.4, 0.0, 0.0, 0.0,1.0])
        self.table_dims = np.ravel([0.35,0.1,0.8])    
        self.cube_pose = np.ravel([0.35,0.3,0.4, 0.0, 0.0, 0.0,1.0])
        self.table_dims = np.ravel([0.3,0.1,0.8])
    

        # get camera data:
        self.mpc_control = ReacherTask(self.task_file, self.robot_file, self.world_file, self.tensor_args)
        self.n_dof = self.mpc_control.controller.rollout_fn.dynamics_model.n_dofs
        self.start_qdd = torch.zeros(self.n_dof, **self.tensor_args)

        # update goal:
        self.exp_params = self.mpc_control.exp_params
        self.current_state = copy.deepcopy(self.robot_sim.get_state(self.env_ptr, self.robot_ptr))
        self.ee_list = []
        

        self.mpc_tensor_dtype = {'device':self.device, 'dtype':torch.float32}
        self.franka_bl_state = np.array([-0.3, 0.3, 0.2, -2.0, 0.0, 2.4,0.0, 0.0,0.0,0.0,0.0,0.0,0.0,0.0])
        self.x_des_list = [self.franka_bl_state]
        self.ee_error = 10.0
        self.j = 0
        self.t_step = 0
        self.i = 0
        self.x_des = self.x_des_list[0]
        self.mpc_control.update_params(goal_state=self.x_des)

        self.x,self.y,self.z = 0.0, 0.0, 0.0
        self.asset_options = gymapi.AssetOptions()
        self.asset_options.armature = 0.001
        self.asset_options.fix_base_link = True
        self.asset_options.thickness = 0.002

        # ?
        self.object_pose = gymapi.Transform() # Represents a transform in the system. https://drive.google.com/file/d/17bDctjlUkYOetNksOd4Ux3k34duq7Zqs/view?usp=sharing
        self.object_pose.p = gymapi.Vec3(self.x,self.y,self.z) # Position, in meters. https://drive.google.com/file/d/17bDctjlUkYOetNksOd4Ux3k34duq7Zqs/view?usp=sharing
        self.object_pose.r = gymapi.Quat(0,0,0, 1) # Rotation Quaternion, represented in the format xi^ + yj^ + zk^ + w  https://drive.google.com/file/d/17bDctjlUkYOetNksOd4Ux3k34duq7Zqs/view?usp=sharing

        self.obj_asset_file = "urdf/mug/movable_mug.urdf" # United Robot Description Format https://www.mathworks.com/help/sm/ug/urdf-model-import.html
        self.obj_asset_root = get_assets_path() # path to .../storm/content/assets
        
        # Visualizing end effector target settings 
        if(self.vis_ee_target):
            # spawn the end effector traget (goal) location (as a rigid body)
            self.target_object = self.world_instance.spawn_object(self.obj_asset_file, self.obj_asset_root, self.object_pose, color=RED, name='ee_target_object') # I assume they refer here to red cup - here they spawn it to environment of gym
            self.obj_base_handle = self.gym.get_actor_rigid_body_handle(self.env_ptr, self.target_object, 0) # ?
            self.obj_body_handle = self.gym.get_actor_rigid_body_handle(self.env_ptr, self.target_object, 6) # I assume they refer here to the "objective body" (a rigid body represents the end effector target pose (red cup))"
            self.gym.set_rigid_body_color(self.env_ptr, self.target_object, 6, gymapi.MESH_VISUAL_AND_COLLISION, RED) # giving the red cup its red color. without this row it would be gray

        # set assets path (paths?)
        self.obj_asset_file = "urdf/mug/mug.urdf"
        self.obj_asset_root = get_assets_path()

        # spawn the end effector to env
        self.ee_handle = self.world_instance.spawn_object(self.obj_asset_file, self.obj_asset_root, self.object_pose, color=RED, name='ee_current_as_mug') # end effector handle in gym env
        self.ee_body_handle = self.gym.get_actor_rigid_body_handle(self.env_ptr, self.ee_handle, 0)
        self.gym.set_rigid_body_color(self.env_ptr, self.ee_handle, 0, gymapi.MESH_VISUAL_AND_COLLISION, GREEN)
        
        # goal position and quaternion
        self.prev_mpc_goal_pos = np.ravel(self.mpc_control.controller.rollout_fn.goal_ee_pos.cpu().numpy()) # goal position
        self.prev_mpc_goal_quat = np.ravel(self.mpc_control.controller.rollout_fn.goal_ee_quat.cpu().numpy()) # goal quaternion (rotation)
        self.object_pose.p = gymapi.Vec3(self.prev_mpc_goal_pos[0], self.prev_mpc_goal_pos[1], self.prev_mpc_goal_pos[2])  # goal position
        self.object_pose.r = gymapi.Quat(self.prev_mpc_goal_quat[1], self.prev_mpc_goal_quat[2], self.prev_mpc_goal_quat[3], self.prev_mpc_goal_quat[0])  # goal quaternion (rotation)
        self.object_pose = self.w_T_r * self.object_pose
        
        if(self.vis_ee_target): 
            self.gym.set_rigid_transform(self.env_ptr, self.obj_base_handle, self.object_pose)
        self.n_dof = self.mpc_control.controller.rollout_fn.dynamics_model.n_dofs
        self.prev_acc = np.zeros(self.n_dof)
        self.ee_pose_gym_cs = gymapi.Transform()
        self.w_robot_coord = CoordinateTransform(trans=self.w_T_robot[0:3,3].unsqueeze(0),
                                            rot=self.w_T_robot[0:3,0:3].unsqueeze(0))

        self.rollout = self.mpc_control.controller.rollout_fn
        self.tensor_args = self.mpc_tensor_dtype
        self.sim_dt = self.mpc_control.exp_params['control_dt']
    
        self.log_traj = {'q':[], 'q_des':[], 'qdd_des':[], 'qd_des':[],
                    'qddd_des':[]}

        self.q_des = None
        self.qd_des = None
        self.t_step = self.gym_instance.get_sim_time()

        self.prev_mpc_goal_pos = np.ravel(self.mpc_control.controller.rollout_fn.goal_ee_pos.cpu().numpy())
        self.prev_mpc_goal_quat = np.ravel(self.mpc_control.controller.rollout_fn.goal_ee_quat.cpu().numpy())

    def update_goal_pose_in_mpc(self, new_goal_pose):
        """
        Informing the mpc about a change in the goal pose at the environment.
          
        new_pose: the new goal pose to pass to the mpc.
        """
        
        # register the new mpc update as the last (most recent) update
        self.prev_mpc_goal_pos[0] = new_goal_pose.p.x
        self.prev_mpc_goal_pos[1] = new_goal_pose.p.y
        self.prev_mpc_goal_pos[2] = new_goal_pose.p.z
        self.prev_mpc_goal_quat[1] = new_goal_pose.r.x
        self.prev_mpc_goal_quat[2] = new_goal_pose.r.y
        self.prev_mpc_goal_quat[3] = new_goal_pose.r.z
        self.prev_mpc_goal_quat[0] = new_goal_pose.r.w
    
        self.mpc_control.update_params(goal_ee_pos=self.prev_mpc_goal_pos,
                                    goal_ee_quat=self.prev_mpc_goal_quat)
        
    def step(self, cost_weights, mpc_params, step_num: int):
        """
        Update arm parameters. cost_weights are the parameters for the mpc cost function.
        mpc_params are the horizon and number of particles of the mpc.
        Input
            - cost_weights: dict {cost_name: weight}
            - mpc_params: dict {horizon: num, num_particles: num}
            - step_num: the time step within the episode
        Output
            - observation: 2 numpy arrays [object dimensions and positions], [q_pos, ee_pos, ee_quat, prev_mpc_goal_pos, g_quat]
            - reward: float reward function for RL
            - keyboard_interupt: bool - true if a keyboard interupt was detacted
        
        """
        GOAL_POSE_CHANGE_TOLL = 0.0001 # TOLERANCE
                    
        # Update Cost and MPC variables dynamically (RLPT Part)
        self.mpc_control.update_costs(cost_weights) 
        if step_num == 0: # technical issue - loading to gpu takes time. So we do it only at the beginning for now.
            self.mpc_control.update_mpc_params(mpc_params) 
        
        self.gym_instance.step() # Advancing the simulation by one time step. TODO: I belive that should be before the cost update and not after. Check with elias

        if(self.vis_ee_target): # only when visualizng goal state (red and green cups)            
            # verified_pose_goal_gym = copy.deepcopy(self.world_instance.get_pose(self.obj_body_handle)) # exactly as in gui
            goal_handle = self.obj_body_handle
            current_goal_pose_storm_cs = self.get_body_pose(goal_handle, coordinate_system='storm') # get updated goal pose from environment (translated to  storm coordinate system)
            curr_goal_pos_storm_cs = np.ravel([current_goal_pose_storm_cs.p.x, current_goal_pose_storm_cs.p.y, current_goal_pose_storm_cs.p.z])
            curr_goal_rot_storm_cs = np.ravel([current_goal_pose_storm_cs.r.w, current_goal_pose_storm_cs.r.x, current_goal_pose_storm_cs.r.y, current_goal_pose_storm_cs.r.z])
            pos_diff_norm = np.linalg.norm(self.prev_mpc_goal_pos - curr_goal_pos_storm_cs) 
            rot_diff_norm =  np.linalg.norm(self.prev_mpc_goal_quat - curr_goal_rot_storm_cs)
            has_changed = pos_diff_norm > GOAL_POSE_CHANGE_TOLL or rot_diff_norm > GOAL_POSE_CHANGE_TOLL
            if has_changed:
                # time.sleep(200) # todo remove debug
                self.update_goal_pose_in_mpc(current_goal_pose_storm_cs) # telling mpc that goal pose has changed
        self.t_step += self.sim_dt
        
        # Get current time-step's DOF state (name, position, velocity and acceleration) for each one of the 7 dofs
        current_dofs_state_formatted = self.get_dofs_states_formatted() # updated dofs from environment. with dof names
        
        # MPC Rollouts: Plan next command* with mpc (returning not the command itself to the controller but the desired state of the dofs on the next time step)
        desired_dofs_state = self.mpc_planning(self.t_step, current_dofs_state_formatted, control_dt=self.sim_dt, WAIT=True)
        current_dofs_state_formatted_ref = current_dofs_state_formatted # not sure why we need a reference 
        current_dofs_state_tensor = torch.as_tensor(np.hstack((current_dofs_state_formatted_ref['position'], current_dofs_state_formatted_ref['velocity'], current_dofs_state_formatted_ref['acceleration'])),**self.tensor_args).unsqueeze(0)
        desired_dofs_position = copy.deepcopy(desired_dofs_state['position']) # sesired dof position for each dof (7x1 vector)
        
        # calculate costs in of state in simulator (at the "real world" not rollout costs)
        _ = self.mpc_control.get_current_error(current_dofs_state_formatted) # ee error as storm defined it. Unused at the moment, I believe thats what running the cost function at the real world (TODO Verify it)

        # Calculate current end effector pose from the 7 current dofs states
        current_ee_pose_storm_cs = self.mpc_control.controller.rollout_fn.get_ee_pose(current_dofs_state_tensor) # see updated docs
        current_ee_pos_storm_cs = np.ravel(current_ee_pose_storm_cs['ee_pos_seq'].cpu().numpy()) # end effector position in current state
        current_ee_quat_storm_cs = np.ravel(current_ee_pose_storm_cs['ee_quat_seq'].cpu().numpy()) # end effector quaternion in current state
        
        # convert from storm coordinate system to gym coordinate system
        self.ee_pose_gym_cs.p = copy.deepcopy(gymapi.Vec3(current_ee_pos_storm_cs[0], current_ee_pos_storm_cs[1], current_ee_pos_storm_cs[2]))
        self.ee_pose_gym_cs.r = gymapi.Quat(current_ee_quat_storm_cs[1], current_ee_quat_storm_cs[2], current_ee_quat_storm_cs[3], current_ee_quat_storm_cs[0])
        self.ee_pose_gym_cs = copy.deepcopy(self.w_T_r) * copy.deepcopy(self.ee_pose_gym_cs) 
        
        # Update gym when using gui settings
        if(self.vis_ee_target): # Sets Transform (pose - position and quaternion) for a Rigid Body (the ee) at the environment.
            self.gym.set_rigid_transform(self.env_ptr, self.ee_body_handle, copy.deepcopy(self.ee_pose_gym_cs))
        if self.gui_settings['render_trajectory_lines']:
            gui_draw_lines(gym_instance, self.mpc_control, self.w_robot_coord) # drawing trajectory lines on screen. Can comment out
        
        # Send the command (the desired doffs position) to "controller" (to the simulator with the environment) to update the position of each dof to the desired ones (In RL terms, we could think of this like "action" here (At) is just telling the controller the next state (st+1) you want).  
        self.robot_sim.command_robot_position(desired_dofs_position, self.env_ptr, self.robot_ptr) # control dofs           
        
        # Don't miss (even if its commented out):

        # # Get the new position of the end effector in storm's cs:         
        # new_dofs_state = desired_dofs_state # environment is deterministic. So next state is 100% known- (exactly the state we desired).
        # self.ee_pose_storm_cs = self.get_ee_pose_at_storm_cs_from_dofs_state(new_dofs_state) # end effector position in storm cs
    
    
    
    def get_ee_pose_at_storm_cs_from_dofs_state(self, dofs_state):
        
        curr_state = np.hstack((dofs_state['position'], dofs_state['velocity'], dofs_state['acceleration']))
        curr_state_tensor = torch.as_tensor(curr_state, **self.tensor_args).unsqueeze(0) 
        ee_pose_state_storm_cs = self.mpc_control.controller.rollout_fn.get_ee_pose(curr_state_tensor) # end effector pose in storm coordinate system. see updated docs
        
        # get current pose:
        e_pos = np.ravel(ee_pose_state_storm_cs['ee_pos_seq'].cpu().numpy())
        e_quat = np.ravel(ee_pose_state_storm_cs['ee_quat_seq'].cpu().numpy())
        
        return e_pos, e_quat
    
    

    def reset(self):
        """
        Change location of objects in environment and target goal
        Input
            - objects: dict {object_type: [pos, dimension]}
            - goal_pos: numpy array [7], (x,y,z, quaternion) of target
     
        """

        world_yml = join_path(get_gym_configs_path(), self.world_file)
        world_params, indexes, compressed_world_params = self.select_participating_obstacles(world_yml) # modify dict - randonmly seclecting a world
        
   
        # refresh observation
        self.gym.refresh_actor_root_state_tensor(self.sim) # In gym: root state (a vector in R13) is composed from: Position, Orientation, Linear Velocity, Angular Velocity

        # acquire root state tensor descriptor
        _root_tensor = self.gym.acquire_actor_root_state_tensor(self.sim)
        
        # wrap it in a PyTorch Tensor
        root_tensor = gymtorch.wrap_tensor(_root_tensor) # a matrix of shape of Ix13 where I is the num of items in simulator (inc)
        
        saved_root_tensor = root_tensor.clone() # save a copy of the original root states 
        root_poses = saved_root_tensor[1:-2, 0:7] # ignore first and two last rows, and take only the poses for each row (pose is a vector in R7)
        
        # Extract new object poses
        poses = self.extract_poses(world_params['world_model']['coll_objs']) # dict of I items: spheres and cubes with their attributes (size, loc etc)

        # Create a torch tensor from the poses
        root_poses[:, 0:7] = self.transform_tensor(torch.tensor(poses), self.w_T_r) # all I items- position and orientation in gui coordinates
        # print(f"DEBUG num of objects in world: {len(world_params['world_model']['coll_objs']['sphere']) + len(world_params['world_model']['coll_objs']['cube'])}")
        
        # Set a new goal pose (position and quaternion)
        p = self.generate_random_position(3) # [p[0],p[1],p[2]]
        q = self.generate_random_quaternion() # [q[0],[q[1],q[2],[q[3]]
        self.goal_pose = p + q #[p[0],p[1],p[2],q[0],[q[1],q[2],[q[3]] - a vector in R7 
    
        # gui coordinate system representation of goal pose - multiplying from left by w_T_r   
        self.goal_pose = self.transform_tensor(torch.tensor(p + q).unsqueeze(0), self.w_T_r).tolist()[0] #in GUI coordinates (w_T_r * p+q) 
        
        # self.update_pose() # see docstring
        root_goal = saved_root_tensor[39, 0:7] # the row of the goal pose (vector in R7) in the "root positions" 
        root_goal[0:7] = torch.tensor(self.goal_pose) # set "root goal" to be as self.goal_pose
        

        # Update simulation object positions
        num_points = 37 # more generally: len(root_poses) - 1 
        int_linspace = np.linspace(1, 37, num=num_points, dtype=int) # array([1,2,..,37])
        actor_indices = torch.tensor(np.append(int_linspace, 39), dtype=torch.int32, device="cpu") # tensor([1,2,...,39])

        
        # Elias: Now we are sending the new created world (not the compressed but the whole world) to the simulator (gym) - compresses means only the objects that participate in simulation (and not hidden)
        # This is because Elias for some reason did not find a way to hide them also from the gui (simulator)
        # when we send only the compressed its just to the STORM computational code, not to the simulator
        # From docs: Sets actor root state buffer to values provided for given actor indices. Full actor root states buffer should be provided for all actors.
        
        # TLDR: to gym- we pass *all* obstacles (participating and not (hidden and not appear in gui)):
        self.gym.set_actor_root_state_tensor_indexed(self.sim, gymtorch.unwrap_tensor(saved_root_tensor), gymtorch.unwrap_tensor(actor_indices), 38) # read the docs

        # TO STORM: Update world_params (compressed only - meaning just a subset of the obstacles that actually participate in simulation (and not hidden)) 
        # TLDR2: to storm - we pass *only participating* obstacles
        self.mpc_control.update_world_params(compressed_world_params)
        
    def goal_test(self, pos_error:np.float64, rot_error:np.float64, eps=1e-3):
        return pos_error < eps and rot_error < eps
        
    def episode(self, cost_weights, mpc_params, tuning=False) -> Tuple[int, float, np.ndarray, np.ndarray]:
        
        """
        Operating a final episode of the robot using STORM system (a final contol loop, from an initial state of the robot to some final state where its over at). 
        The control during the episode (a control loop) is done by the STORM mppi controller. 
        
        cost_weights: initial parameters for the cost function
        mpc_params: initial parameters for the cost function
        tuning: TODO: serving the rlpt. if True, the cost and mpc params will be re-selected throughout the episode frequently (probably on every time step). 
        
        Return:
        a tuple t
            t[0](int) is the number of time-steps took took to reach goal position & orientation. -1 if failed to reach  
            t[1](float) is the total run time of episde in seconds
            
        """
        cost_weights = copy.deepcopy(cost_weights) # to ensure a call by value and not by reference (we don't want to modify the params outside of the function)
        
        # document all errors along the episode 
        pos_errors = np.zeros(EPISODE_MAX_TS)
        rot_errors = np.zeros(EPISODE_MAX_TS)
        
        # -- start episode control loop --
        ep_start_time = time.time()
        for ts in range(EPISODE_MAX_TS):
            
            # Planning current step with rollouts and executing it in environment 
            print(f"episode: {ep} time step: {ts} ")
            mpc.step(cost_weights, mpc_params, ts) 
            
            # calculate orientation and position errors and perform convergence to goal state:
            curr_ee_pose: gymapi.Transform = self.get_body_pose(self.ee_body_handle, "gym") # in gym coordinate system
            goal_ee_pose: gymapi.Transform = self.get_body_pose(self.obj_body_handle, "gym") # in gym coordinate system
            ee_pos_error: np.float64 = pos_error(curr_ee_pose.p, goal_ee_pose.p) # end effector position error
            ee_rot_error: np.float64 = rot_error(curr_ee_pose.r,goal_ee_pose.r)  # end effector rotation error   
            
            # calculate min distance from robot point cloud to obstacles point clouds
            
            # robot_pt = point_cloud_utils.generate_robot_point_cloud(mpc.env_ptr, mpc.gym)
            
            # save of the whole episode 
            pos_errors[ts] = ee_pos_error 
            rot_errors[ts] = ee_rot_error
            
            # goal test
            reached_goal = self.goal_test(ee_pos_error, ee_rot_error) 
            if reached_goal: 
                break
            
        # -- end of episode --
       
        if reached_goal:
            time_to_goal = time.time() - ep_start_time
            return ts, time_to_goal, pos_errors, rot_errors
        else:
            return -1, -1,  pos_errors, rot_errors
        
        
    

        
        
###############################################################################################
#####################h HELPER FUNCTIONS #######################################################
    
    def get_body_pose(self, handle, coordinate_system) -> gymapi.Transform:
        """
        Getting most updated pose of a body by its handler (for example if you override its pose in gui, that pose is updated immediately at next sim rendering step)
        """
        gym_pose = copy.deepcopy(self.world_instance.get_pose(handle)) # gym coordinates first. Exactly as seen in gui (verified)
        if coordinate_system == 'storm':
            storm_pose = copy.deepcopy(self.w_T_r.inverse() * gym_pose) 
            return storm_pose # translate to storm coordinates
        elif coordinate_system == 'gym':
            return gym_pose
        else:
            raise BadArgumentUsage("should pass storm or gym") 
                
    def mpc_planning(self,t_step, current_dofs_states_formatted, control_dt, WAIT):
        """
        A WRAPPER: Made this to improve code explainability without changing original function name.        
        """
        # Generate rollouts and return the desired state of each dof of the robot (7 dofs in total) 

        return self.mpc_control.get_command(t_step, current_dofs_states_formatted, control_dt, WAIT) # next command to send to controller

    def get_dofs_states_formatted(self):
        """
        A WRAPPER: Made this to improve code explainability without changing original function name
        """
        return copy.deepcopy(self.robot_sim.get_state(self.env_ptr, self.robot_ptr)) # calling to the original function 


    def extract_poses(self, dictionary):
        poses = []
        for obj_type, obj_data in dictionary.items():
            if isinstance(obj_data, dict):
                for obj_name, obj_info in obj_data.items():
                    if 'pose' in obj_info:
                        poses.append(obj_info['pose'])
                    if 'position' in obj_info:
                        poses.append(obj_info['position'] + [0.0, 0.0, 0.0, 1])
        return poses

    def transform_tensor(self, tensor, w_T_r):
        """
        Transorming a pose (vector in length 7 (3 position, 4 rotation)) from STORM coordinate system to GUI coordinate system.
        
        Parameters:

        tensor: A PyTorch tensor containing rows of pose data. Each row consists of a position (x, y, z) and a quaternion (x, y, z, w).
        w_T_r: A transformation (gymapi.Transform) representing the relationship between two coordinate frames (e.g., world frame to robot frame).
        Workflow:

        Loop Over Rows: Iterates over each row in the input tensor, where each row represents a pose (position + quaternion).
        Create Pose: Converts each row into a gymapi.Transform object using the Vec3 (position) and Quat (quaternion) classes.
        Apply Transformation: Multiplies w_T_r with the pose. This applies the transformation, effectively converting the pose into a new coordinate frame (e.g., transforming an object's pose from the robot frame to the world frame).
        Store Transformed Pose: Extracts the position and quaternion from the transformed pose and appends it to the transformed_tensor list.
        Return Result: Converts the list of transformed poses into a PyTorch tensor and returns it.
        Purpose: Transforms a list of poses from one coordinate frame to another using the transformation w_T_r.
        This function is used when you need to apply a transformation to update the poses based on the current simulation state.
        
        might help: https://mecharithm.com/learning/lesson/homogenous-transformation-matrices-configurations-in-robotics-12
        https://www.quora.com/What-is-a-homogeneous-transformation-matrix 
        
        
        """

        transformed_tensor = []

        for row in tensor:
            pose = gymapi.Transform()
            pose.p = gymapi.Vec3(row[0], row[1], row[2])
            pose.r = gymapi.Quat(row[3], row[4], row[5], row[6])
            
            table_pose = w_T_r * pose # pose in STORM coordinates -> pose in GUI coordinates 

            transformed_row = [table_pose.p.x, table_pose.p.y, table_pose.p.z,
                            table_pose.r.x, table_pose.r.y, table_pose.r.z, table_pose.r.w]
            
            transformed_tensor.append(transformed_row)

        return torch.tensor(transformed_tensor)

    def convert_to_transform(self, pose):
        pose_t = gymapi.Transform()
        pose_t.p = gymapi.Vec3(pose[0], pose[1], pose[2])
        pose_t.r = gymapi.Quat(pose[3], pose[4], pose[5], pose[6])
        return pose_t

    def select_random_indexes(self, first, last, max_n, min_n):
        """
        first and last indexes
        n = max number of objects
        min = min number of objects
        """
        #print("ELIAS !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        # Define the range of indexes from first to last (inclusive)
        indexes = list(range(first, last))
        
        # Randomly determine how many indexes to select (between 0 and n)
        num_indexes_to_select = random.randint(min_n, max_n)
        
        # Randomly select the determined number of indexes from the list
        selected_indexes = random.sample(indexes, min(num_indexes_to_select, len(indexes)))
        
        return selected_indexes

    def generate_random_position(self, n):
        # Generate random position in a grid divided into n^2 blocks
        x = random.uniform(-2/n, 2/n)
        y = random.uniform(-2/n, 2/n)
        z = random.uniform(0.1, 0.7)
        return [x, y, z]

    def generate_excluded_random_position(self):
        # Randomly decide which range to use
        x = 0
        y = 0
        if random.random() < 0.5:
            # Generate a random number in the range -1 to -0.2
            x =  random.uniform(-1, -0.15)
        else:
            # Generate a random number in the range 0.2 to 1
            x = random.uniform(0.15, 1)
        if random.random() < 0.5:
            # Generate a random number in the range -1 to -0.2
            y =  random.uniform(-1, -0.15)
        else:
            # Generate a random number in the range 0.2 to 1
            y = random.uniform(0.15, 1)
        z = random.uniform(0.1, 0.7)
        return [x, y, z]

    def generate_random_quaternion(self):
        # Generate random quaternion representing a rotation
        euler_angles = [random.uniform(0, 2*math.pi) for _ in range(3)]
        rotation = R.from_euler('xyz', euler_angles)
        quaternion = rotation.as_quat()
        return quaternion.tolist()

    def open_yaml(self, world_yml):
        with open(world_yml) as file:
            world_params = yaml.load(file, Loader=yaml.FullLoader)
        #print(f"world_params: {world_params}")
        return world_params

    def get_objects_by_indexes(self, world_params, indexes):
        coll_objs = world_params['world_model']['coll_objs'] # spheres and cubes
        
        # Flatten the dictionary into a list of (key, value) pairs
        objects = []
        for obj_type, obj_dict in coll_objs.items():
            for obj_name, obj_info in obj_dict.items():
                objects.append((obj_name, obj_info))
        
        # Get the objects corresponding to the provided indexes
        selected_objects = []
        for index in indexes:
            if 0 <= index < len(objects):
                selected_objects.append(objects[index])
            else:
                raise IndexError(f"Index {index} out of range")
        
        return selected_objects

    def get_base_name(self, name):
        base_name = ''.join([char for char in name if char.isalpha()])
        return base_name

    def randomize_pos(self, obj, base_name):

        position = self.generate_excluded_random_position()
        if base_name == 'cube':
            quat = self.generate_random_quaternion()
            return position + quat
        else:
            return position
        
    def select_participating_obstacles(self, world_yml):
        """
        # Formerly called "modify_dict" but changed to this name for more clarity.
         
        This method: 
        1. selects randomly just a subset of the participating obstacles in next run, out of all available obstacles (cubes and spheres) in  world_yml
        2. changing randomly the selected obstacles locations, using randomize_pos()

        """
        
        # hyper parameters (can be modified) # TODO - add this as a user parameter sometime
        min_spheres = 1 # minumum spheres to select
        max_spheres = 10 # maximum spheres to select
        min_cubes = 1 # # minimum cubes to select
        max_cubes = 20 # maximum cubes to select
        
        
        # First we select random obstacles from the file (by selecting indexes that will represent them from disjoint ranges) 
        
        indexes_spheres = self.select_random_indexes(0, 10, max_spheres, min_spheres)  
        indexes_cubes = self.select_random_indexes(11, 35, max_cubes, min_cubes)
        indexes = indexes_spheres + indexes_cubes
        
        # Read the dictionary with all optional obstacles
        world_params = self.open_yaml(world_yml) # = {'world_model': {'coll_objs': {'sphere': {all spheres..},'cube': {all cubes..}}}}

        selected_objects = self.get_objects_by_indexes(world_params, indexes)
        
        # Then we randomly change the pose (position and orientation) of each selected obstacle
        compressed_world_params = {'world_model': {'coll_objs': {'sphere': {},'cube': {}}}}
        sphere_index = 1
        cube_index = 1
        for i in range(len(indexes)):
            obj = selected_objects[i]
            name = obj[0]
            base_name = self.get_base_name(name)
            new_pos = self.randomize_pos(obj, base_name) 
            if base_name == 'sphere':
                # Modify dict
                world_params['world_model']['coll_objs'][base_name][name]['position'] = new_pos
                # Add to compressed dict
                radius_position = {}
                radius_position['radius'] = world_params['world_model']['coll_objs'][base_name][name]['radius']
                radius_position['position'] = world_params['world_model']['coll_objs'][base_name][name]['position']
                compressed_world_params['world_model']['coll_objs'][base_name][base_name + str(sphere_index)] = radius_position
                sphere_index += 1
            elif base_name == 'cube':
                #print("Cube added !!!")
                # Modify dict
                world_params['world_model']['coll_objs'][base_name][name]['pose'] = new_pos
                # Add to compressed dict
                dims_pose = {}
                dims_pose['dims'] = world_params['world_model']['coll_objs'][base_name][name]['dims']
                dims_pose['pose'] = world_params['world_model']['coll_objs'][base_name][name]['pose']
                compressed_world_params['world_model']['coll_objs'][base_name][base_name + str(cube_index)] = dims_pose
                cube_index += 1

            dims_pose = {}
            dims_pose['dims'] = world_params['world_model']['coll_objs']['cube']['cube28']['dims']
            dims_pose['pose'] = world_params['world_model']['coll_objs']['cube']['cube28']['pose']
            compressed_world_params['world_model']['coll_objs']['cube']['cube28'] = dims_pose


        return world_params, indexes, compressed_world_params # return: all optional obstacles objects


    
###############################################################################################
###############################################################################################

cost_weights = { # TODO - replace with reading from storm/content/configs/mpc/franka_reacher.yml
    
    # ArmReacher costs        
    "goal_pose": [15.0, 1000.0], # orientation, position
    "zero_vel": 0.0, 
    "zero_acc": 0.0,
    "joint_l2": 0.0,
    
    # ArmBase costs
    "robot_self_collision" : 5000, 
    "primitive_collision" : 5000,
    "voxel_collision" : 0,
    "null_space": 1.0,
    "manipulability": 30, 
    "ee_vel": 0.0, 
    "stop_cost": 100, 
    "stop_cost_acc": 0.0, 
    "smooth": 1.0, 
    "state_bound": 1000.0 
}

mpc_params = {
    "horizon" : 30 , # Dan - From paper:  How deep into the future each rollout (imaginary simulation) sees
    "particles" : 500, # Dan - How many rollouts are done. from paper:Number of trajectories sampled per iteration of optimization (or particles)
    "n_iters": 1 # Num of optimization steps - TODO (from paper) https://docs.google.com/document/d/1BNhvwpZp4Zq1Noj_A6z84WRbsSv_NkFmr0AgDwroyQI/edit#bookmark=id.ltisat9yika1
    } 

if __name__ == '__main__':
    
    parser = argparse.ArgumentParser(description='pass args')
    parser.add_argument('--robot', type=str, default='franka', help='Robot to spawn')
    parser.add_argument('--cuda', action='store_true', default=True, help='use cuda')
    parser.add_argument('--headless', action='store_true', default=False, help='headless gym') # False means use viewer (gui)
    parser.add_argument('--control_space', type=str, default='acc', help='Robot to spawn')
    args = parser.parse_args()
    sim_params = load_yaml(join_path(get_gym_configs_path(),'physx.yml')) # GYM DOCS/Simulation Setup — Isaac Gym documentation.pdf
    sim_params['headless'] = args.headless
    bgu_cfg = load_config_with_defaults(BGU_CFG_PATH)
    if bgu_cfg['cost_sniffer']['include']:
        sniffer_params:dict = copy.deepcopy(bgu_cfg['cost_sniffer'])
        sniffer_params.pop('include')
        GLobalVars.cost_sniffer = CostFnSniffer(*sniffer_params)

    profile_memory = bgu_cfg['profile_memory']['include'] # use memory profiling
    # instantiate empty gym:
    gym_instance = Gym(**sim_params) # http://127.0.0.1:5500/STORM_DOCS/docs/_build/html/storm_kit.gym.html#submodules. The gym object by itself doesn’t do very much. It only serves as a proxy for the Gym API. To create a simulation, you need to call the create_sim method. https://drive.google.com/file/d/1zNXDHUs0Z4bHZkF-uTPzhQn7OI3y88ha/view?usp=sharing
    
    # instantiate the object which is controlling the simulation loop
    mpc = MpcRobotInteractive(args, gym_instance, bgu_cfg) 
    
    
    # if profiling memory usage, start profiling 
    if profile_memory:    
        start_mem_profiling()
        
    ##### main loop of episodes execution: #######
    
    # prepare subplots
    figure_rows = math.ceil(EPISODES / FIGURE_COLUMNS)
    fig, axs = plt.subplots(figure_rows, FIGURE_COLUMNS, sharex=True)
    show_episode_plots = bgu_cfg['episode_plots']['show'] 
    try:
        for ep in range(EPISODES):    
            # run episode
            steps_to_goal, time_to_goal, pos_errors, rot_errors =  mpc.episode(cost_weights, mpc_params) 
            
            if show_episode_plots: # make figures

                
                if EPISODES > 1:    
                    row = ep // FIGURE_COLUMNS # episode row in  plot
                    col = (ep + FIGURE_COLUMNS) % FIGURE_COLUMNS # episode column in  plot
                    curr_axs = axs[col] if figure_rows == 1 else axs[row, col] # if there is only one row, no row spcificying is needed (something technical of matplotlib)
                    curr_axs.plot(pos_errors) # add pos errors to plot
                    curr_axs.plot(rot_errors) # add rot errors to plot
                    curr_axs.set_title(f'ep {ep} stg {steps_to_goal} ttg {time_to_goal}')
                    curr_axs.legend(["position error", "rotation error"], loc="upper right")        
                else:
                    plt.plot(pos_errors)
                    plt.plot(rot_errors)
                    plt.title(f'ep {ep} stg {steps_to_goal} ttg {time_to_goal}')
                    plt.legend(["position error", "rotation error"], loc="upper right")
                    
                
            ##########    
            mpc.reset() # reset the mpc world
        if profile_memory:
            finish_mem_profiling(bgu_cfg['profile_memory']['pickle_path'])
        
        if show_episode_plots:    
            plt.show()
        
    except torch.cuda.OutOfMemoryError: 
        if profile_memory:
            finish_mem_profiling(bgu_cfg['profile_memory']['pickle_path'])
            
    

